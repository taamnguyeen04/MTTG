import streamlit as st
from utils import send_email, text_to_speech, recognize_speech
import time
def support_page():
    # """Trang h·ªó tr·ª£ ho√†n to√†n b·∫±ng gi·ªçng n√≥i"""
    # """Hi·ªÉn th·ªã trang h·ªó tr·ª£ g·ª≠i mail cho gi√°o vi√™n b·∫±ng gi·ªçng n√≥i"""
    st.markdown("<h1 style='text-align: center; color: #4CAF50;'>üìß H·ªó tr·ª£ h·ªçc t·∫≠p</h1>", unsafe_allow_html=True)

    # Danh s√°ch gi√°o vi√™n
    TEACHERS = {
        "Nguy·ªÖn Tr·∫ßn Minh T√¢m": "nguyentranminhtam04@gmail.com",
        "ƒêinh Th·ªã Gi√†u": "dinhthigiau.contact@gmail.com"
    }

    # Kh·ªüi t·∫°o session state n·∫øu ch∆∞a c√≥
    if 'support_state' not in st.session_state:
        st.session_state.support_state = {
            "selected_teacher": None,
            "email_content": "",
            "is_recording": False,
            "first_time_enter": True
        }

    # Ph·∫ßn ch·ªçn m√¥n h·ªçc n·∫øu ch∆∞a ch·ªçn
    if st.session_state.support_state["first_time_enter"]:
        text_to_speech("H·ªó tr·ª£ h·ªçc t·∫≠p")
        st.session_state.support_state["first_time_enter"] = False  # ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
    # CSS t√πy ch·ªânh
    st.markdown("""
        <style>
            .teacher-card {
                border-radius: 10px;
                padding: 15px;
                margin: 10px 0;
                background-color: #f0f2f6;
                transition: all 0.3s;
            }
            .teacher-card:hover {
                background-color: #e0e5ec;
                transform: translateY(-2px);
            }
            .teacher-selected {
                background-color: #4CAF50 !important;
                color: white !important;
            }
            .voice-btn {
                display: flex;
                justify-content: center;
                align-items: center;
                gap: 10px;
            }
        </style>
        """, unsafe_allow_html=True)

    # Ph·∫ßn 1: Ch·ªçn gi√°o vi√™n
    st.markdown("### 1. Ch·ªçn gi√°o vi√™n c·∫ßn h·ªó tr·ª£")
    # text_to_speech("Ch·ªçn gi√°o vi√™n c·∫ßn h·ªó tr·ª£")
    # T·∫°o c√°c card gi√°o vi√™n
    cols = st.columns(2)
    for i, (teacher_name, teacher_email) in enumerate(TEACHERS.items()):
        with cols[i % 2]:
            is_selected = st.session_state.support_state["selected_teacher"] == teacher_name
            card_class = "teacher-card teacher-selected" if is_selected else "teacher-card"

            st.markdown(
                f"""
                    <div class="{card_class}" onclick="window.location.href='?teacher={teacher_name}'">
                        <h4>{teacher_name}</h4>
                        <p>{teacher_email}</p>
                    </div>
                    """,
                unsafe_allow_html=True
            )

    # N√∫t ch·ªçn gi√°o vi√™n b·∫±ng gi·ªçng n√≥i
    if st.button("üé§ Ch·ªçn gi√°o vi√™n b·∫±ng gi·ªçng n√≥i", key="select_teacher_voice"):
        text_to_speech("H√£y n√≥i t√™n gi√°o vi√™n b·∫°n mu·ªën li√™n h·ªá")
        teacher_name = recognize_speech()
        if teacher_name:
            # T√¨m gi√°o vi√™n ph√π h·ª£p nh·∫•t v·ªõi t√™n ƒë∆∞·ª£c n√≥i
            best_match = None
            highest_score = 0
            for name in TEACHERS.keys():
                score = sum(1 for word in teacher_name.split() if word.lower() in name.lower())
                if score > highest_score:
                    highest_score = score
                    best_match = name

            if best_match:
                st.session_state.support_state["selected_teacher"] = best_match
                st.success(f"ƒê√£ ch·ªçn gi√°o vi√™n: {best_match}")
                text_to_speech(f"ƒê√£ ch·ªçn gi√°o vi√™n {best_match}")
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y gi√°o vi√™n ph√π h·ª£p")
                text_to_speech("Kh√¥ng t√¨m th·∫•y gi√°o vi√™n ph√π h·ª£p")

    # Hi·ªÉn th·ªã gi√°o vi√™n ƒë√£ ch·ªçn
    if st.session_state.support_state["selected_teacher"]:
        st.markdown(f"""
            <div style="background-color:#e8f5e9; padding:10px; border-radius:5px; margin:10px 0;">
                <b>Gi√°o vi√™n ƒë√£ ch·ªçn:</b> {st.session_state.support_state["selected_teacher"]}
                <br><b>Email:</b> {TEACHERS[st.session_state.support_state["selected_teacher"]]}
            </div>
            """, unsafe_allow_html=True)

    # Ph·∫ßn 2: Nh·∫≠p n·ªôi dung email
    st.markdown("### 2. N·ªôi dung c·∫ßn h·ªó tr·ª£")

    # Nh·∫≠p n·ªôi dung b·∫±ng gi·ªçng n√≥i
    if st.button("üé§ Nh·∫≠p n·ªôi dung b·∫±ng gi·ªçng n√≥i", key="input_content_voice"):
        st.session_state.support_state["is_recording"] = True
        st.warning("ƒêang ghi √¢m... H√£y n√≥i n·ªôi dung b·∫°n mu·ªën g·ª≠i")
        text_to_speech("H√£y n√≥i n·ªôi dung b·∫°n mu·ªën g·ª≠i cho gi√°o vi√™n")

        content = recognize_speech()
        if content:
            st.session_state.support_state["email_content"] = content
            st.session_state.support_state["is_recording"] = False
            st.success("ƒê√£ ghi nh·∫≠n n·ªôi dung!")
            text_to_speech("ƒê√£ ghi nh·∫≠n n·ªôi dung c·ªßa b·∫°n")

    # Hi·ªÉn th·ªã textarea ƒë·ªÉ ch·ªânh s·ª≠a n·ªôi dung
    email_content = st.text_area(
        "N·ªôi dung email:",
        value=st.session_state.support_state["email_content"],
        height=150,
        placeholder="Nh·∫≠p n·ªôi dung b·∫°n c·∫ßn h·ªó tr·ª£..."
    )
    st.session_state.support_state["email_content"] = email_content

    # Ph·∫ßn 3: G·ª≠i email
    st.markdown("### 3. G·ª≠i y√™u c·∫ßu h·ªó tr·ª£")

    if st.button("üì§ G·ª≠i email cho gi√°o vi√™n", type="primary"):
        if not st.session_state.support_state["selected_teacher"]:
            st.error("Vui l√≤ng ch·ªçn gi√°o vi√™n!")
            text_to_speech("Vui l√≤ng ch·ªçn gi√°o vi√™n")
        elif not st.session_state.support_state["email_content"].strip():
            st.error("Vui l√≤ng nh·∫≠p n·ªôi dung!")
            text_to_speech("Vui l√≤ng nh·∫≠p n·ªôi dung")
        else:
            teacher_name = st.session_state.support_state["selected_teacher"]
            teacher_email = TEACHERS[teacher_name]
            email_content = st.session_state.support_state["email_content"]

            # Th√™m th√¥ng tin ng∆∞·ªùi g·ª≠i v√†o n·ªôi dung email
            full_content = f"""
                H·ªçc sinh g·ª≠i y√™u c·∫ßu h·ªó tr·ª£:
                - Gi√°o vi√™n: {teacher_name}
                - N·ªôi dung: 
                {email_content}
                """

            if send_email(f"Y√™u c·∫ßu h·ªó tr·ª£ t·ª´ h·ªçc sinh", full_content, teacher_email):
                st.success("ƒê√£ g·ª≠i email th√†nh c√¥ng!")
                text_to_speech("ƒê√£ g·ª≠i email th√†nh c√¥ng cho gi√°o vi√™n")

                # Reset n·ªôi dung sau khi g·ª≠i
                st.session_state.support_state["email_content"] = ""
            else:
                st.error("G·ª≠i email th·∫•t b·∫°i!")
                text_to_speech("G·ª≠i email kh√¥ng th√†nh c√¥ng")
    # st.markdown("<h1 style='text-align: center; color: #4CAF50;'>üìß H·ªó tr·ª£ h·ªçc t·∫≠p</h1>", unsafe_allow_html=True)

    TEACHERS = {
        "Nguy·ªÖn Tr·∫ßn Minh T√¢m": "nguyentranminhtam04@gmail.com",
        "ƒêinh Th·ªã Gi√†u": "dinhthigiau.contact@gmail.com"
    }

    # Kh·ªüi t·∫°o session state
    if 'voice_support' not in st.session_state:
        st.session_state.voice_support = {
            "step": "select_teacher",
            "teacher": None,
            "content": "",
            "confirmations": 0,
            "first_prompt": True
        }

    # X·ª≠ l√Ω lu·ªìng gi·ªçng n√≥i
    if st.session_state.voice_support["first_prompt"]:
        text_to_speech("Xin h√£y n√≥i t√™n gi√°o vi√™n b·∫°n mu·ªën li√™n h·ªá")
        st.session_state.voice_support["first_prompt"] = False
        # return

    # B∆∞·ªõc 1: Ch·ªçn gi√°o vi√™n
    if st.session_state.voice_support["step"] == "select_teacher":
        # teacher_name = recognize_speech()
        time.sleep(3)
        teacher_name = "Minh T√¢m"
        if teacher_name:
            best_match = process_teacher_input(teacher_name, TEACHERS)
            if best_match:
                st.session_state.voice_support["teacher"] = best_match
                text_to_speech(f"B·∫°n ƒë√£ ch·ªçn gi√°o vi√™n {best_match}. H√£y n√≥i n·ªôi dung c·∫ßn g·ª≠i")
                st.session_state.voice_support["step"] = "record_content"
            else:
                text_to_speech("Kh√¥ng t√¨m th·∫•y gi√°o vi√™n ph√π h·ª£p. Vui l√≤ng n√≥i l·∫°i t√™n gi√°o vi√™n")
        # return

    # B∆∞·ªõc 2: Ghi nh·∫≠n n·ªôi dung
    if st.session_state.voice_support["step"] == "record_content":
        # content = recognize_speech()
        time.sleep(3)
        content = "d·∫° em c·∫ßn th·∫ßy h·ªó tr·ª£"
        if content:
            st.session_state.voice_support["content"] = content
            text_to_speech(f"N·ªôi dung c·ªßa b·∫°n l√†: {content}. B·∫°n c√≥ mu·ªën g·ª≠i ngay kh√¥ng? H√£y n√≥i C√≥ ho·∫∑c Kh√¥ng")
            st.session_state.voice_support["step"] = "confirmation"
        # return

    # B∆∞·ªõc 3: X√°c nh·∫≠n
    if st.session_state.voice_support["step"] == "confirmation":
        # confirm = recognize_speech()
        time.sleep(3)
        confirm = "c√≥"
        if confirm:
            if "c√≥" in confirm.lower():
                # G·ª≠i email
                success = send_email(
                    subject="Y√™u c·∫ßu h·ªó tr·ª£ t·ª´ h·ªçc sinh",
                    body=st.session_state.voice_support["content"],  # ƒê·ªïi content -> body
                    receiver_email=TEACHERS[st.session_state.voice_support["teacher"]]
                    # ƒê·ªïi recipient -> receiver_email
                )
                if success:
                    text_to_speech("ƒê√£ g·ª≠i email th√†nh c√¥ng cho gi√°o vi√™n!")
                else:
                    text_to_speech("C√≥ l·ªói x·∫£y ra khi g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau")

                # Reset tr·∫°ng th√°i
                st.session_state.voice_support = {
                    "step": "select_teacher",
                    "teacher": None,
                    "content": "",
                    "confirmations": 0,
                    "first_prompt": True
                }
            else:
                text_to_speech("ƒê√£ h·ªßy g·ª≠i email. Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i")
                st.session_state.voice_support["step"] = "select_teacher"
        # return


def process_teacher_input(voice_input, teachers):
    """X·ª≠ l√Ω t√™n gi√°o vi√™n t·ª´ ƒë·∫ßu v√†o gi·ªçng n√≥i"""
    voice_input = voice_input.lower().replace("c√¥", "").replace("th·∫ßy", "").strip()
    best_score = 0
    best_match = None

    for name in teachers.keys():
        clean_name = name.lower().replace("c√¥", "").replace("th·∫ßy", "").strip()
        score = sum(
            1 for word in voice_input.split()
            if word in clean_name.split()
        )

        if score > best_score:
            best_score = score
            best_match = name

    return best_match if best_score > 0 else None