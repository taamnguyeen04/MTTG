import streamlit as st
from utils import load_data, text_to_speech, LESSONS_FILE, recognize_speech, send_email, show_flashcards

def show_lessons():
    """Hi·ªÉn th·ªã giao di·ªán b√†i h·ªçc v·ªõi c√°c card m√¥n h·ªçc c√≥ th·ªÉ ch·ªçn ƒë∆∞·ª£c"""
    st.markdown("""
    <style>
        /* CSS t√πy ch·ªânh cho to√†n b·ªô trang */
        .main-title {
            text-align: center; 
            color: #4CAF50; 
            margin-bottom: 30px;
            font-size: 2.2rem;
            font-weight: 600;
        }
        .subject-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .subject-card {
            aspect-ratio: 1 / 1;
            border-radius: 12px;
            background: linear-gradient(145deg, #4CAF50 0%, #81C784 100%);
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-size: 1.4rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            border: none;
            padding: 20px;
            text-align: center;
        }
        .subject-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.15);
            background: linear-gradient(145deg, #388E3C 0%, #66BB6A 100%);
        }
        .subject-card:active {
            transform: translateY(0);
        }
        .subject-icon {
            font-size: 2.5rem;
            margin-bottom: 15px;
        }
        .select-prompt {
            text-align: center;
            font-size: 1.2rem;
            color: #555;
            margin-bottom: 10px;
        }
        .empty-state {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        .flashcard-btn {
            background: linear-gradient(145deg, #2196F3 0%, #03A9F4 100%) !important;
            color: white !important;
            font-size: 1.2rem !important;
            font-weight: 600 !important;
            padding: 15px 25px !important;
            border-radius: 12px !important;
            margin: 20px auto !important;
            display: block !important;
            width: 80% !important;
            box-shadow: 0 4px 12px rgba(33, 150, 243, 0.3) !important;
        }
        .flashcard-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(33, 150, 243, 0.4) !important;
        }
    </style>
    """, unsafe_allow_html=True)

    st.markdown('<h1 class="main-title">üìö B√†i H·ªçc</h1>', unsafe_allow_html=True)

    lessons = load_data(LESSONS_FILE)
    if not lessons:
        st.markdown('<div class="empty-state">Hi·ªán ch∆∞a c√≥ b√†i h·ªçc n√†o ƒë∆∞·ª£c t·∫°o!</div>', unsafe_allow_html=True)
        return

    # L·∫•y danh s√°ch m√¥n h·ªçc v√† s·∫Øp x·∫øp theo th·ª© t·ª± alphabet
    subjects = sorted(list(set(lesson["mon_hoc"] for lesson in lessons)))

    # Icon t∆∞∆°ng ·ª©ng cho t·ª´ng m√¥n h·ªçc
    subject_icons = {
        "To√°n": "üßÆ",
        "VƒÉn": "üìù",
        "Ti·∫øng Nh·∫≠t": "üóæ",
        "Anh": "üåé",
        "L√Ω": "‚öõÔ∏è",
        "H√≥a": "üß™",
        "Sinh": "üß¨",
        "S·ª≠": "üèõÔ∏è",
        "ƒê·ªãa": "üåç",
        "ƒê·∫°o ƒë·ª©c": "‚ù§Ô∏è",
        "GDCD": "‚öñÔ∏è",
        "Tin h·ªçc": "üíª",
        "C√¥ng ngh·ªá": "üîß",
        "M·ªπ thu·∫≠t": "üé®",
        "√Çm nh·∫°c": "üéµ",
        "Th·ªÉ d·ª•c": "üèÉ"
    }

    st.markdown('<div class="select-prompt">Vui l√≤ng ch·ªçn m√¥n h·ªçc</div>', unsafe_allow_html=True)

    # Hi·ªÉn th·ªã grid c√°c m√¥n h·ªçc
    st.markdown('<div class="subject-grid">', unsafe_allow_html=True)

    # T·∫°o c√°c card m√¥n h·ªçc c√≥ th·ªÉ click ƒë∆∞·ª£c
    cols = st.columns(3)
    subjects_to_show = subjects + ["Ti·∫øng Nh·∫≠t"]  # Th√™m m√¥n Ti·∫øng Nh·∫≠t v√†o danh s√°ch hi·ªÉn th·ªã

    for i, subject in enumerate(subjects_to_show):
    # for i, subject in enumerate(subjects):
        icon = subject_icons.get(subject, "üìö")

        with cols[i % 3]:
            # S·ª≠ d·ª•ng st.button v·ªõi HTML custom ƒë·ªÉ c√≥ giao di·ªán ƒë·∫πp
            if st.button(
                f"{icon}\n\n{subject}",  # S·ª≠ d·ª•ng \n ƒë·ªÉ xu·ªëng d√≤ng
                key=f"subject_{subject}",
                # help=f"Ch·ªçn m√¥n {subject}",
                use_container_width=True
            ):
                st.session_state.selected_subject = subject
                text_to_speech(f"B·∫°n ƒë√£ ch·ªçn m√¥n {subject}")
                st.rerun()  # L√†m m·ªõi trang ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung m√¥n h·ªçc

    st.markdown('</div>', unsafe_allow_html=True)

    # Ki·ªÉm tra n·∫øu ƒë√£ ch·ªçn m√¥n h·ªçc
    if 'selected_subject' not in st.session_state:
        st.markdown('<div class="empty-state">Vui l√≤ng ch·ªçn m·ªôt m√¥n h·ªçc t·ª´ danh s√°ch tr√™n</div>',
                    unsafe_allow_html=True)
        text_to_speech("Ch·ªçn m√¥n h·ªçc b·∫°n mu·ªën h·ªçc")

        return

    # N√∫t quay l·∫°i ch·ªçn m√¥n kh√°c
    if st.button("‚Ü©Ô∏è Ch·ªçn m√¥n kh√°c"):
        del st.session_state.selected_subject
        st.rerun()

    # TH√äM N√öT LUY·ªÜN T·∫¨P FLASHCARD N·∫æU L√Ä M√îN TI·∫æNG ANH
    if st.session_state.selected_subject in ["Ti·∫øng Anh", "Ti·∫øng Nh·∫≠t"]:
        btn_text = {
            "Ti·∫øng Anh": "üÉè Luy·ªán T·∫≠p Flashcard Ti·∫øng Anh",
            "Ti·∫øng Nh·∫≠t": "üóæ Luy·ªán T·∫≠p Flashcard Ti·∫øng Nh·∫≠t"
        }[st.session_state.selected_subject]

        if st.button(btn_text, key="flashcard_btn", use_container_width=True):
            st.session_state.show_flashcards = True
            st.rerun()

    # N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô xem flashcard
    if st.session_state.get("show_flashcards"):
        show_flashcards()
        return

    # Ph·∫ßn hi·ªÉn th·ªã b√†i h·ªçc sau khi ch·ªçn m√¥n
    subject_lessons = [lesson for lesson in lessons if lesson["mon_hoc"] == st.session_state.selected_subject]
    if st.session_state.selected_subject == "Ti·∫øng Nh·∫≠t" and not subject_lessons:
        st.info("Hi·ªán ch∆∞a c√≥ b√†i h·ªçc n√†o cho m√¥n Ti·∫øng Nh·∫≠t")

        # Ch·ªâ hi·ªÉn th·ªã n√∫t flashcard
        if st.button("üóæ Luy·ªán T·∫≠p Flashcard Ti·∫øng Nh·∫≠t",
                     key="flashcard_btn_jp",
                     use_container_width=True):
            st.session_state.show_flashcards = True
            st.rerun()
        return
    # CSS cho tabs b√†i h·ªçc
    st.markdown("""
    <style>
        .lesson-tabs {
            border-radius: 12px;
            overflow: hidden;
            margin-top: 30px;
        }
        .lesson-tab {
            padding: 15px 25px;
            font-size: 1.1rem;
        }
        .lesson-content {
            padding: 25px;
            background: #f9f9f9;
            border-radius: 0 0 12px 12px;
            margin-top: -1px;
        }
        .lesson-title {
            font-size: 1.6rem;
            color: #2E7D32;
            margin-bottom: 15px;
        }
        .lesson-desc {
            font-size: 1.1rem;
            line-height: 1.6;
            color: #444;
        }
    </style>
    """, unsafe_allow_html=True)

    # T·∫°o tabs b√†i h·ªçc
    tab_titles = [lesson["ten_bai"] for lesson in subject_lessons]
    tabs = st.tabs(tab_titles)

    for i, tab in enumerate(tabs):
        with tab:
            lesson = subject_lessons[i]
            st.markdown(f'<div class="lesson-title">{lesson["ten_bai"]}</div>', unsafe_allow_html=True)

            # B·ªë c·ª•c 2 c·ªôt
            col1, col2 = st.columns([1, 2])

            with col1:
                if "hinh_anh" in lesson:
                    st.image(lesson["hinh_anh"], use_container_width=True)

            with col2:
                if "mo_ta" in lesson:
                    st.markdown(f'<div class="lesson-desc">{lesson["mo_ta"]}</div>', unsafe_allow_html=True)

                if "noi_dung_text" in lesson:
                    with st.expander("üìñ N·ªôi dung b√†i h·ªçc", expanded=True):
                        st.markdown(lesson["noi_dung_text"])
                        # Nh√≥m c√°c n√∫t ch·ª©c nƒÉng
                btn_col1, btn_col2 = st.columns(2)
                with btn_col1:
                    if st.button(
                            "üîä ƒê·ªçc b√†i",
                            key=f"read_{i}",
                            # help="Nh·∫•n ƒë·ªÉ nghe n·ªôi dung b√†i h·ªçc",
                            use_container_width=True
                    ):
                        text_to_speech(lesson.get("noi_dung_text", ""))

                with btn_col2:
                    if st.button(
                            "üé§ Gi·ªçng n√≥i",
                            key=f"voice_{i}",
                            # help="Nh·∫•n ƒë·ªÉ ƒëi·ªÅu khi·ªÉn b·∫±ng gi·ªçng n√≥i",
                            use_container_width=True
                    ):
                        text_to_speech("H√£y n√≥i l·ªánh c·ªßa b·∫°n")
                        command = recognize_speech()
                        if command:
                            if "ƒë·ªçc b√†i" in command or "ƒë·ªçc n·ªôi dung" in command:
                                text_to_speech(lesson.get("noi_dung_text", ""))
                            elif "g·ª≠i c√¢u h·ªèi" in command:
                                st.session_state.voice_question = True
            # X·ª≠ l√Ω g·ª≠i c√¢u h·ªèi
            if st.session_state.get("voice_question"):
                text_to_speech("H√£y n√≥i c√¢u h·ªèi c·ªßa b·∫°n")
                question = recognize_speech()
                if question:
                    email_content = f"""
                    H·ªçc vi√™n c√≥ c√¢u h·ªèi v·ªÅ b√†i h·ªçc:
                    - M√¥n: {st.session_state.selected_subject}
                    - B√†i: {lesson['ten_bai']}
                    - C√¢u h·ªèi: {question}
                    """
                    if send_email(f"C√¢u h·ªèi v·ªÅ b√†i {lesson['ten_bai']}", email_content,
                                  "nguyentranminhtam04@gmail.com"):
                        st.success("ƒê√£ g·ª≠i c√¢u h·ªèi ƒë·∫øn gi√°o vi√™n!")
                        text_to_speech("ƒê√£ g·ª≠i c√¢u h·ªèi ƒë·∫øn gi√°o vi√™n")
                    st.session_state.voice_question = False