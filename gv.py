import streamlit as st
import json
import pandas as pd
from datetime import datetime
import os

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="H·ªá th·ªëng Qu·∫£n l√Ω Quiz Python",
    page_icon="üë®‚Äçüè´",
    layout="wide",
    menu_items={
        'Get Help': 'https://github.com/streamlit',
        'Report a bug': "https://github.com/streamlit",
        'About': "H·ªá th·ªëng qu·∫£n l√Ω Quiz Python - Phi√™n b·∫£n 1.0"
    }
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .teacher-header {
        font-size: 28px;
        color: #3a7bd5;
        padding-bottom: 10px;
        border-bottom: 2px solid #3a7bd5;
        margin-bottom: 20px;
    }
    .metric-box {
        background-color: #f0f2f6;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .question-card {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .lesson-card {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .stButton>button {
        width: 100%;
    }
    .activity-item {
        background-color: #f8f9fa;
        border-left: 4px solid #3a7bd5;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 0 5px 5px 0;
    }
</style>
""", unsafe_allow_html=True)

# ƒê∆∞·ªùng d·∫´n file
QUESTIONS_FILE = "data/test.json"
RESULTS_FILE = "results.json"
LESSONS_FILE = "data/lessons.json"


# ========== C√ÅC H√ÄM CH·ª®C NƒÇNG ==========

def load_questions():
    """T·∫£i danh s√°ch c√¢u h·ªèi t·ª´ file"""
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def save_questions(questions):
    """L∆∞u danh s√°ch c√¢u h·ªèi v√†o file"""
    os.makedirs(os.path.dirname(QUESTIONS_FILE), exist_ok=True)
    with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(questions, f, indent=4, ensure_ascii=False)


def load_results():
    """T·∫£i k·∫øt qu·∫£ h·ªçc sinh t·ª´ file"""
    try:
        with open(RESULTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def load_lessons():
    """T·∫£i danh s√°ch b√†i h·ªçc t·ª´ file"""
    try:
        with open(LESSONS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def save_lessons(lessons):
    """L∆∞u danh s√°ch b√†i h·ªçc v√†o file"""
    os.makedirs(os.path.dirname(LESSONS_FILE), exist_ok=True)
    with open(LESSONS_FILE, "w", encoding="utf-8") as f:
        json.dump(lessons, f, indent=4, ensure_ascii=False)


# ========== GIAO DI·ªÜN XEM K·∫æT QU·∫¢ ==========

def show_results():
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ h·ªçc sinh"""
    st.markdown("<div class='teacher-header'>üìä K·∫øt qu·∫£ h·ªçc sinh</div>", unsafe_allow_html=True)

    results = load_results()

    if not results:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu k·∫øt qu·∫£ n√†o ƒë∆∞·ª£c ghi l·∫°i.")
        return

    # Chuy·ªÉn ƒë·ªïi sang DataFrame
    df = pd.DataFrame(results)

    # Th·ªëng k√™ c∆° b·∫£n
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.markdown("<div class='metric-box'>"
                    f"<h3>T·ªïng s·ªë b√†i l√†m</h3>"
                    f"<h1>{len(df)}</h1>"
                    "</div>", unsafe_allow_html=True)
    with col2:
        st.markdown("<div class='metric-box'>"
                    f"<h3>ƒêi·ªÉm cao nh·∫•t</h3>"
                    f"<h1>{df['score'].max()}</h1>"
                    "</div>", unsafe_allow_html=True)
    with col3:
        st.markdown("<div class='metric-box'>"
                    f"<h3>ƒêi·ªÉm trung b√¨nh</h3>"
                    f"<h1>{df['score'].mean():.1f}</h1>"
                    "</div>", unsafe_allow_html=True)
    with col4:
        st.markdown("<div class='metric-box'>"
                    f"<h3>ƒêi·ªÉm th·∫•p nh·∫•t</h3>"
                    f"<h1>{df['score'].min()}</h1>"
                    "</div>", unsafe_allow_html=True)

    # B·∫£ng x·∫øp h·∫°ng
    st.subheader("B·∫£ng x·∫øp h·∫°ng chi ti·∫øt")
    df_sorted = df.sort_values("score", ascending=False).reset_index(drop=True)
    df_sorted.index = df_sorted.index + 1
    st.dataframe(df_sorted, use_container_width=True)

    # Ph√¢n t√≠ch d·ªØ li·ªáu
    st.subheader("Ph√¢n t√≠ch k·∫øt qu·∫£")

    tab1, tab2 = st.tabs(["Ph√¢n ph·ªëi ƒëi·ªÉm s·ªë", "Xu h∆∞·ªõng theo th·ªùi gian"])

    with tab1:
        st.bar_chart(df["score"].value_counts().sort_index())

    with tab2:
        if "timestamp" in df.columns:
            df["timestamp"] = pd.to_datetime(df["timestamp"])
            df.set_index("timestamp", inplace=True)
            st.line_chart(df["score"].resample("D").count())
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi gian")

    # Xu·∫•t d·ªØ li·ªáu
    st.subheader("Xu·∫•t d·ªØ li·ªáu")
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button(
        label="üì• T·∫£i xu·ªëng to√†n b·ªô k·∫øt qu·∫£ (CSV)",
        data=csv,
        file_name=f"ket_qua_quiz_{datetime.now().strftime('%Y%m%d')}.csv",
        mime="text/csv"
    )


# ========== GIAO DI·ªÜN SO·∫†N C√ÇU H·ªéI ==========

def create_question():
    """Giao di·ªán t·∫°o c√¢u h·ªèi m·ªõi"""
    st.markdown("<div class='teacher-header'>‚úèÔ∏è So·∫°n c√¢u h·ªèi m·ªõi</div>", unsafe_allow_html=True)

    with st.form("question_form", clear_on_submit=True):
        question = st.text_area("N·ªôi dung c√¢u h·ªèi:", height=100, placeholder="Nh·∫≠p n·ªôi dung c√¢u h·ªèi...")

        col1, col2 = st.columns(2)
        with col1:
            option_a = st.text_input("ƒê√°p √°n A:", placeholder="Nh·∫≠p ƒë√°p √°n A")
            option_b = st.text_input("ƒê√°p √°n B:", placeholder="Nh·∫≠p ƒë√°p √°n B")
        with col2:
            option_c = st.text_input("ƒê√°p √°n C:", placeholder="Nh·∫≠p ƒë√°p √°n C")
            option_d = st.text_input("ƒê√°p √°n D:", placeholder="Nh·∫≠p ƒë√°p √°n D")

        correct_answer = st.selectbox("ƒê√°p √°n ƒë√∫ng:", ["A", "B", "C", "D"])
        topic = st.text_input("Ch·ªß ƒë·ªÅ:", placeholder="V√≠ d·ª•: To√°n, ƒê·∫°o ƒë·ª©c, Anh vƒÉn...")
        difficulty = st.slider("ƒê·ªô kh√≥:", 1, 5, 3)

        submitted = st.form_submit_button("L∆∞u c√¢u h·ªèi")

        if submitted:
            if not question or not all([option_a, option_b, option_c, option_d]):
                st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß n·ªôi dung c√¢u h·ªèi v√† c√°c ƒë√°p √°n!")
            else:
                new_question = {
                    "cau_hoi": question,
                    "dap_an": [option_a, option_b, option_c, option_d],
                    "dap_an_dung": correct_answer,
                    "chu_de": topic if topic else "Kh√°c",
                    "do_kho": difficulty
                }

                questions = load_questions()
                questions.append(new_question)
                save_questions(questions)

                st.success("‚úÖ C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
                st.balloons()


# ========== QU·∫¢N L√ù NG√ÇN H√ÄNG C√ÇU H·ªéI ==========

def manage_questions():
    """Giao di·ªán qu·∫£n l√Ω c√¢u h·ªèi"""
    st.markdown("<div class='teacher-header'>üìù Qu·∫£n l√Ω ng√¢n h√†ng c√¢u h·ªèi</div>", unsafe_allow_html=True)

    questions = load_questions()

    if not questions:
        st.info("Ng√¢n h√†ng c√¢u h·ªèi tr·ªëng.")
        return

    # B·ªô l·ªçc v√† t√¨m ki·∫øm
    col1, col2 = st.columns(2)
    with col1:
        topics = ["T·∫•t c·∫£"] + sorted(list(set(q.get("chu_de", "Kh√°c") for q in questions)))
        selected_topic = st.selectbox("L·ªçc theo ch·ªß ƒë·ªÅ:", topics)
    with col2:
        search_term = st.text_input("T√¨m ki·∫øm c√¢u h·ªèi:")

    # √Åp d·ª•ng b·ªô l·ªçc
    filtered_questions = questions
    if selected_topic != "T·∫•t c·∫£":
        filtered_questions = [q for q in filtered_questions if q.get("chu_de", "Kh√°c") == selected_topic]
    if search_term:
        filtered_questions = [q for q in filtered_questions if search_term.lower() in q["cau_hoi"].lower()]

    # Hi·ªÉn th·ªã th·ªëng k√™
    st.info(f"ƒêang hi·ªÉn th·ªã {len(filtered_questions)}/{len(questions)} c√¢u h·ªèi")

    # Hi·ªÉn th·ªã t·ª´ng c√¢u h·ªèi
    for i, q in enumerate(filtered_questions):
        with st.expander(f"C√¢u {i + 1}: {q['cau_hoi']} (ƒê·ªô kh√≥: {'‚≠ê' * q.get('do_kho', 3)})", expanded=False):
            st.markdown(f"**Ch·ªß ƒë·ªÅ:** {q.get('chu_de', 'Kh√¥ng x√°c ƒë·ªãnh')}")

            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"**A.** {q['dap_an'][0]}")
                st.markdown(f"**B.** {q['dap_an'][1]}")
            with col2:
                st.markdown(f"**C.** {q['dap_an'][2]}")
                st.markdown(f"**D.** {q['dap_an'][3]}")

            st.success(f"ƒê√°p √°n ƒë√∫ng: {q['dap_an_dung']}")

            # N√∫t ch·ªânh s·ª≠a v√† x√≥a
            col1, col2, _ = st.columns([1, 1, 2])
            with col1:
                if st.button(f"‚úèÔ∏è S·ª≠a", key=f"edit_{i}"):
                    st.session_state.edit_index = i
                    st.session_state.edit_question = q
                    st.rerun()
            with col2:
                if st.button(f"üóëÔ∏è X√≥a", key=f"delete_{i}"):
                    questions.remove(q)
                    save_questions(questions)
                    st.success("ƒê√£ x√≥a c√¢u h·ªèi!")
                    st.rerun()


# ========== GIAO DI·ªÜN CH·ªàNH S·ª¨A C√ÇU H·ªéI ==========

def edit_question():
    """Giao di·ªán ch·ªânh s·ª≠a c√¢u h·ªèi"""
    st.markdown("<div class='teacher-header'>‚úèÔ∏è Ch·ªânh s·ª≠a c√¢u h·ªèi</div>", unsafe_allow_html=True)

    if "edit_question" not in st.session_state:
        st.warning("Kh√¥ng c√≥ c√¢u h·ªèi n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ ch·ªânh s·ª≠a")
        st.button("Quay l·∫°i", on_click=lambda: st.session_state.pop("edit_index"))
        return

    q = st.session_state.edit_question
    index = st.session_state.edit_index

    with st.form("edit_form"):
        question = st.text_area("N·ªôi dung c√¢u h·ªèi:", value=q["cau_hoi"], height=100)

        col1, col2 = st.columns(2)
        with col1:
            option_a = st.text_input("ƒê√°p √°n A:", value=q["dap_an"][0])
            option_b = st.text_input("ƒê√°p √°n B:", value=q["dap_an"][1])
        with col2:
            option_c = st.text_input("ƒê√°p √°n C:", value=q["dap_an"][2])
            option_d = st.text_input("ƒê√°p √°n D:", value=q["dap_an"][3])

        correct_answer = st.selectbox("ƒê√°p √°n ƒë√∫ng:", ["A", "B", "C", "D"],
                                      index=["A", "B", "C", "D"].index(q["dap_an_dung"]))
        topic = st.text_input("Ch·ªß ƒë·ªÅ:", value=q.get("chu_de", ""))
        difficulty = st.slider("ƒê·ªô kh√≥:", 1, 5, q.get("do_kho", 3))

        col1, col2 = st.columns(2)
        with col1:
            submitted = st.form_submit_button("L∆∞u thay ƒë·ªïi")
        with col2:
            cancel = st.form_submit_button("H·ªßy b·ªè")

        if cancel:
            st.session_state.pop("edit_index")
            st.session_state.pop("edit_question")
            st.rerun()

        if submitted:
            if not question or not all([option_a, option_b, option_c, option_d]):
                st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß n·ªôi dung c√¢u h·ªèi v√† c√°c ƒë√°p √°n!")
            else:
                questions = load_questions()
                questions[index] = {
                    "cau_hoi": question,
                    "dap_an": [option_a, option_b, option_c, option_d],
                    "dap_an_dung": correct_answer,
                    "chu_de": topic if topic else "Kh√°c",
                    "do_kho": difficulty
                }
                save_questions(questions)

                st.success("‚úÖ C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
                st.session_state.pop("edit_index")
                st.session_state.pop("edit_question")
                st.balloons()
                st.rerun()


# ========== GIAO DI·ªÜN SO·∫†N B√ÄI H·ªåC ==========

def create_lesson():
    """Giao di·ªán t·∫°o b√†i h·ªçc m·ªõi"""
    st.markdown("<div class='teacher-header'>üìñ So·∫°n b√†i h·ªçc m·ªõi</div>", unsafe_allow_html=True)

    with st.form("lesson_form", clear_on_submit=True):
        col1, col2 = st.columns(2)
        with col1:
            subject = st.text_input("M√¥n h·ªçc:", placeholder="V√≠ d·ª•: ƒê·∫°o ƒë·ª©c, To√°n, Ti·∫øng Vi·ªát...")
        with col2:
            lesson_title = st.text_input("T√™n b√†i h·ªçc:", placeholder="V√≠ d·ª•: Bi·∫øt ∆°n ng∆∞·ªùi lao ƒë·ªông...")

        description = st.text_area("M√¥ t·∫£ ng·∫Øn:", height=80,
                                   placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ b√†i h·ªçc...")

        st.markdown("**N·ªôi dung b√†i h·ªçc:**")
        content_text = st.text_area("N·ªôi dung vƒÉn b·∫£n:", height=150,
                                    placeholder="Nh·∫≠p n·ªôi dung chi ti·∫øt b√†i h·ªçc...")

        content_audio = st.text_area("N·ªôi dung audio (ghi ch√∫ cho file √¢m thanh):", height=100,
                                     placeholder="Ghi ch√∫ n·ªôi dung cho file √¢m thanh (n·∫øu c√≥)...")

        image_file = st.text_input("ƒê∆∞·ªùng d·∫´n h√¨nh ·∫£nh:", placeholder="V√≠ d·ª•: img/lao_cong.png")

        # Ph·∫ßn ho·∫°t ƒë·ªông
        st.markdown("**Ho·∫°t ƒë·ªông b√†i h·ªçc:**")
        activities = st.session_state.get("activities", [])

        for i, activity in enumerate(activities):
            with st.container():
                col1, col2 = st.columns([4, 1])
                with col1:
                    st.markdown(f"<div class='activity-item'>"
                                f"<b>{activity['ten_hoat_dong']}</b><br>"
                                f"{activity['noi_dung']}</div>",
                                unsafe_allow_html=True)
                with col2:
                    if st.button(f"X√≥a", key=f"del_act_{i}"):
                        activities.pop(i)
                        st.session_state.activities = activities
                        st.rerun()

        with st.expander("Th√™m ho·∫°t ƒë·ªông m·ªõi", expanded=False):
            act_name = st.text_input("T√™n ho·∫°t ƒë·ªông:", key="act_name",
                                     placeholder="V√≠ d·ª•: Kh·ªüi ƒë·ªông, Kh√°m ph√°, Luy·ªán t·∫≠p...")
            act_content = st.text_area("N·ªôi dung ho·∫°t ƒë·ªông:", key="act_content",
                                       height=100, placeholder="M√¥ t·∫£ chi ti·∫øt ho·∫°t ƒë·ªông...")
            if st.form_submit_button("Th√™m ho·∫°t ƒë·ªông"):
                if act_name and act_content:
                    if "activities" not in st.session_state:
                        st.session_state.activities = []
                    st.session_state.activities.append({
                        "ten_hoat_dong": act_name,
                        "noi_dung": act_content
                    })
                    st.rerun()
                else:
                    st.warning("Vui l√≤ng nh·∫≠p ƒë·ªß t√™n v√† n·ªôi dung ho·∫°t ƒë·ªông")

        submitted = st.form_submit_button("L∆∞u b√†i h·ªçc")
        if submitted:
            if not subject or not lesson_title or not content_text:
                st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin m√¥n h·ªçc, t√™n b√†i v√† n·ªôi dung!")
            else:
                new_lesson = {
                    "mon_hoc": subject,
                    "ten_bai": lesson_title,
                    "mo_ta": description,
                    "noi_dung_text": content_text,
                    "noi_dung_audio": content_audio,
                    "hinh_anh": image_file,
                    "hoat_dong": st.session_state.get("activities", [])
                }

                lessons = load_lessons()
                lessons.append(new_lesson)
                save_lessons(lessons)

                st.success("‚úÖ B√†i h·ªçc ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
                if "activities" in st.session_state:
                    st.session_state.pop("activities")
                st.balloons()


# ========== QU·∫¢N L√ù B√ÄI H·ªåC ==========

def manage_lessons():
    """Giao di·ªán qu·∫£n l√Ω b√†i h·ªçc"""
    st.markdown("<div class='teacher-header'>üìö Qu·∫£n l√Ω b√†i h·ªçc</div>", unsafe_allow_html=True)

    lessons = load_lessons()

    if not lessons:
        st.info("Ch∆∞a c√≥ b√†i h·ªçc n√†o ƒë∆∞·ª£c t·∫°o.")
        return

    # B·ªô l·ªçc v√† t√¨m ki·∫øm
    col1, col2 = st.columns(2)
    with col1:
        subjects = ["T·∫•t c·∫£"] + sorted(list(set(lesson.get("mon_hoc", "Kh√°c") for lesson in lessons)))
        selected_subject = st.selectbox("L·ªçc theo m√¥n h·ªçc:", subjects)
    with col2:
        search_term = st.text_input("T√¨m ki·∫øm b√†i h·ªçc:")

    # √Åp d·ª•ng b·ªô l·ªçc
    filtered_lessons = lessons
    if selected_subject != "T·∫•t c·∫£":
        filtered_lessons = [lesson for lesson in filtered_lessons
                            if lesson.get("mon_hoc", "Kh√°c") == selected_subject]
    if search_term:
        filtered_lessons = [lesson for lesson in filtered_lessons
                            if search_term.lower() in lesson["ten_bai"].lower()]

    # Hi·ªÉn th·ªã th·ªëng k√™
    st.info(f"ƒêang hi·ªÉn th·ªã {len(filtered_lessons)}/{len(lessons)} b√†i h·ªçc")

    # Hi·ªÉn th·ªã t·ª´ng b√†i h·ªçc
    for i, lesson in enumerate(filtered_lessons):
        with st.expander(f"{lesson['mon_hoc']} - {lesson['ten_bai']}", expanded=False):
            st.markdown(f"**M√¥ t·∫£:** {lesson.get('mo_ta', 'Kh√¥ng c√≥ m√¥ t·∫£')}")

            col1, col2 = st.columns(2)
            with col1:
                st.markdown("**N·ªôi dung vƒÉn b·∫£n:**")
                st.text(lesson.get("noi_dung_text", "Kh√¥ng c√≥ n·ªôi dung"))
            with col2:
                if lesson.get("hinh_anh"):
                    st.image(lesson["hinh_anh"], caption="H√¨nh ·∫£nh b√†i h·ªçc", width=200)
                else:
                    st.info("Kh√¥ng c√≥ h√¨nh ·∫£nh")

            st.markdown("**Ho·∫°t ƒë·ªông:**")
            for activity in lesson.get("hoat_dong", []):
                st.markdown(f"<div class='activity-item'>"
                            f"<b>{activity['ten_hoat_dong']}</b><br>"
                            f"{activity['noi_dung']}</div>",
                            unsafe_allow_html=True)

            # N√∫t ch·ªânh s·ª≠a v√† x√≥a
            col1, col2, _ = st.columns([1, 1, 2])
            with col1:
                if st.button(f"‚úèÔ∏è S·ª≠a", key=f"edit_lesson_{i}"):
                    st.session_state.edit_lesson_index = i
                    st.session_state.edit_lesson = lesson
                    st.rerun()
            with col2:
                if st.button(f"üóëÔ∏è X√≥a", key=f"delete_lesson_{i}"):
                    lessons.remove(lesson)
                    save_lessons(lessons)
                    st.success("ƒê√£ x√≥a b√†i h·ªçc!")
                    st.rerun()


# ========== GIAO DI·ªÜN CH·ªàNH S·ª¨A B√ÄI H·ªåC ==========

def edit_lesson():
    """Giao di·ªán ch·ªânh s·ª≠a b√†i h·ªçc"""
    st.markdown("<div class='teacher-header'>‚úèÔ∏è Ch·ªânh s·ª≠a b√†i h·ªçc</div>", unsafe_allow_html=True)

    if "edit_lesson" not in st.session_state:
        st.warning("Kh√¥ng c√≥ b√†i h·ªçc n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ ch·ªânh s·ª≠a")
        st.button("Quay l·∫°i", on_click=lambda: st.session_state.pop("edit_lesson_index"))
        return

    lesson = st.session_state.edit_lesson
    index = st.session_state.edit_lesson_index

    # Kh·ªüi t·∫°o ho·∫°t ƒë·ªông trong session state n·∫øu ch∆∞a c√≥
    if "activities" not in st.session_state:
        st.session_state.activities = lesson.get("hoat_dong", [])

    with st.form("edit_lesson_form"):
        col1, col2 = st.columns(2)
        with col1:
            subject = st.text_input("M√¥n h·ªçc:", value=lesson.get("mon_hoc", ""))
        with col2:
            lesson_title = st.text_input("T√™n b√†i h·ªçc:", value=lesson.get("ten_bai", ""))

        description = st.text_area("M√¥ t·∫£ ng·∫Øn:", value=lesson.get("mo_ta", ""), height=80)

        st.markdown("**N·ªôi dung b√†i h·ªçc:**")
        content_text = st.text_area("N·ªôi dung vƒÉn b·∫£n:",
                                    value=lesson.get("noi_dung_text", ""),
                                    height=150)

        content_audio = st.text_area("N·ªôi dung audio (ghi ch√∫ cho file √¢m thanh):",
                                     value=lesson.get("noi_dung_audio", ""),
                                     height=100)

        image_file = st.text_input("ƒê∆∞·ªùng d·∫´n h√¨nh ·∫£nh:",
                                   value=lesson.get("hinh_anh", ""))

        # Ph·∫ßn ho·∫°t ƒë·ªông
        st.markdown("**Ho·∫°t ƒë·ªông b√†i h·ªçc:**")
        activities = st.session_state.get("activities", [])

        for i, activity in enumerate(activities):
            with st.container():
                col1, col2 = st.columns([4, 1])
                with col1:
                    st.markdown(f"<div class='activity-item'>"
                                f"<b>{activity['ten_hoat_dong']}</b><br>"
                                f"{activity['noi_dung']}</div>",
                                unsafe_allow_html=True)
                with col2:
                    if st.button(f"X√≥a", key=f"del_act_edit_{i}"):
                        activities.pop(i)
                        st.session_state.activities = activities
                        st.rerun()

        with st.expander("Th√™m ho·∫°t ƒë·ªông m·ªõi", expanded=False):
            act_name = st.text_input("T√™n ho·∫°t ƒë·ªông:", key="act_name_edit",
                                     placeholder="V√≠ d·ª•: Kh·ªüi ƒë·ªông, Kh√°m ph√°, Luy·ªán t·∫≠p...")
            act_content = st.text_area("N·ªôi dung ho·∫°t ƒë·ªông:", key="act_content_edit",
                                       height=100, placeholder="M√¥ t·∫£ chi ti·∫øt ho·∫°t ƒë·ªông...")
            if st.button("Th√™m ho·∫°t ƒë·ªông", key="add_act_edit"):
                if act_name and act_content:
                    st.session_state.activities.append({
                        "ten_hoat_dong": act_name,
                        "noi_dung": act_content
                    })
                    st.rerun()
                else:
                    st.warning("Vui l√≤ng nh·∫≠p ƒë·ªß t√™n v√† n·ªôi dung ho·∫°t ƒë·ªông")

        col1, col2 = st.columns(2)
        with col1:
            submitted = st.form_submit_button("L∆∞u thay ƒë·ªïi")
        with col2:
            cancel = st.form_submit_button("H·ªßy b·ªè")

        if cancel:
            st.session_state.pop("edit_lesson_index")
            st.session_state.pop("edit_lesson")
            if "activities" in st.session_state:
                st.session_state.pop("activities")
            st.rerun()

        if submitted:
            if not subject or not lesson_title or not content_text:
                st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin m√¥n h·ªçc, t√™n b√†i v√† n·ªôi dung!")
            else:
                updated_lesson = {
                    "mon_hoc": subject,
                    "ten_bai": lesson_title,
                    "mo_ta": description,
                    "noi_dung_text": content_text,
                    "noi_dung_audio": content_audio,
                    "hinh_anh": image_file,
                    "hoat_dong": st.session_state.get("activities", [])
                }

                lessons = load_lessons()
                lessons[index] = updated_lesson
                save_lessons(lessons)

                st.success("‚úÖ B√†i h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
                st.session_state.pop("edit_lesson_index")
                st.session_state.pop("edit_lesson")
                if "activities" in st.session_state:
                    st.session_state.pop("activities")
                st.balloons()
                st.rerun()


# ========== GIAO DI·ªÜN CH√çNH ==========

def main():
    """Giao di·ªán ch√≠nh"""

    # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    if "logged_in" not in st.session_state:
        st.session_state.logged_in = False

    if not st.session_state.logged_in:
        st.title("ƒêƒÉng nh·∫≠p h·ªá th·ªëng")

        with st.form("login_form"):
            username = st.text_input("T√™n ƒëƒÉng nh·∫≠p:")
            password = st.text_input("M·∫≠t kh·∫©u:", type="password")
            submitted = st.form_submit_button("ƒêƒÉng nh·∫≠p")

            if submitted:
                # Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p (ƒë∆°n gi·∫£n)
                if username == "giaovien" and password == "123456":
                    st.session_state.logged_in = True
                    st.rerun()
                else:
                    st.error("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")
        return

    # Menu ch√≠nh
    st.sidebar.title("Menu Gi√°o vi√™n")
    menu_options = [
        "üèÜ Xem k·∫øt qu·∫£ h·ªçc sinh",
        "‚úèÔ∏è So·∫°n c√¢u h·ªèi m·ªõi",
        "üìù Qu·∫£n l√Ω ng√¢n h√†ng c√¢u h·ªèi",
        "üìñ So·∫°n b√†i h·ªçc m·ªõi",
        "üìö Qu·∫£n l√Ω b√†i h·ªçc",
        "‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng"
    ]
    choice = st.sidebar.selectbox("Ch·ªçn ch·ª©c nƒÉng:", menu_options)

    # ƒêƒÉng xu·∫•t
    if st.sidebar.button("üö™ ƒêƒÉng xu·∫•t"):
        st.session_state.logged_in = False
        st.rerun()

    # Hi·ªÉn th·ªã giao di·ªán t∆∞∆°ng ·ª©ng
    if choice == "üèÜ Xem k·∫øt qu·∫£ h·ªçc sinh":
        show_results()
    elif choice == "‚úèÔ∏è So·∫°n c√¢u h·ªèi m·ªõi":
        if "edit_index" in st.session_state:
            edit_question()
        else:
            create_question()
    elif choice == "üìù Qu·∫£n l√Ω ng√¢n h√†ng c√¢u h·ªèi":
        if "edit_index" in st.session_state:
            edit_question()
        else:
            manage_questions()
    elif choice == "üìñ So·∫°n b√†i h·ªçc m·ªõi":
        if "edit_lesson_index" in st.session_state:
            edit_lesson()
        else:
            create_lesson()
    elif choice == "üìö Qu·∫£n l√Ω b√†i h·ªçc":
        if "edit_lesson_index" in st.session_state:
            edit_lesson()
        else:
            manage_lessons()
    else:
        st.markdown("<div class='teacher-header'>‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng</div>", unsafe_allow_html=True)

        st.subheader("Import/Export d·ªØ li·ªáu")

        tab1, tab2 = st.tabs(["Export d·ªØ li·ªáu", "Import d·ªØ li·ªáu"])

        with tab1:
            st.write("Xu·∫•t d·ªØ li·ªáu ra file JSON")

            col1, col2, col3 = st.columns(3)
            with col1:
                # Export c√¢u h·ªèi
                questions = load_questions()
                st.download_button(
                    label="üì§ Export c√¢u h·ªèi",
                    data=json.dumps(questions, indent=4, ensure_ascii=False),
                    file_name="ngan_hang_cau_hoi.json",
                    mime="application/json"
                )
            with col2:
                # Export k·∫øt qu·∫£
                results = load_results()
                st.download_button(
                    label="üì§ Export k·∫øt qu·∫£",
                    data=json.dumps(results, indent=4, ensure_ascii=False),
                    file_name="ket_qua_hoc_sinh.json",
                    mime="application/json"
                )
            with col3:
                # Export b√†i h·ªçc
                lessons = load_lessons()
                st.download_button(
                    label="üì§ Export b√†i h·ªçc",
                    data=json.dumps(lessons, indent=4, ensure_ascii=False),
                    file_name="bai_hoc.json",
                    mime="application/json"
                )

        with tab2:
            st.write("Nh·∫≠p d·ªØ li·ªáu t·ª´ file JSON")

            upload_type = st.radio("Lo·∫°i d·ªØ li·ªáu:", ["C√¢u h·ªèi", "K·∫øt qu·∫£", "B√†i h·ªçc"])

            uploaded_file = st.file_uploader(f"Ch·ªçn file {upload_type} (JSON)", type="json")

            if uploaded_file:
                try:
                    data = json.load(uploaded_file)

                    if upload_type == "C√¢u h·ªèi":
                        save_questions(data)
                    elif upload_type == "K·∫øt qu·∫£":
                        with open(RESULTS_FILE, "w", encoding="utf-8") as f:
                            json.dump(data, f, indent=4, ensure_ascii=False)
                    else:  # B√†i h·ªçc
                        save_lessons(data)

                    st.success("Import d·ªØ li·ªáu th√†nh c√¥ng!")
                    st.rerun()
                except Exception as e:
                    st.error(f"L·ªói khi import d·ªØ li·ªáu: {str(e)}")


if __name__ == "__main__":
    main()