import streamlit as st
import json
import random
from datetime import datetime
import pandas as pd
import time
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import base64
from io import BytesIO
import speech_recognition as sr
from gtts import gTTS
import os
import pygame


# ========== C·∫§U H√åNH H·ªÜ TH·ªêNG ==========
st.set_page_config(
    page_title="H·ªá th·ªëng k√≠ch th√≠ch t∆∞ duy h·ªçc t·∫≠p v√† h·ªó tr·ª£ ƒëi·ªÅu ch·ªânh t∆∞ th·∫ø ng·ªìi th√¥ng minh d√†nh cho ng∆∞·ªùi khi·∫øm th·ªã",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ƒê∆∞·ªùng d·∫´n file
LESSONS_FILE = "data/lessons.json"
QUESTIONS_FILE = "data/questions.json"
RESULTS_FILE = "results.json"
FLASHCARDS_FILE = "data/flashcards.json"
os.makedirs("data", exist_ok=True)

# Kh·ªüi t·∫°o pygame mixer
pygame.mixer.init()


# ========== C√ÅC H√ÄM TI·ªÜN √çCH ==========
def load_data(file_path):
    """T·∫£i d·ªØ li·ªáu t·ª´ file JSON"""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def load_flashcards():
    if os.path.exists(FLASHCARDS_FILE):
        with open(FLASHCARDS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

flashcards = load_flashcards()
random.shuffle(flashcards)

def save_data(file_path, data):
    """L∆∞u d·ªØ li·ªáu v√†o file JSON"""
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


def send_email(subject, body, receiver_email):
    """G·ª≠i email s·ª≠ d·ª•ng SMTP"""
    sender_email = "tam.nguyentranminh04@hcmut.edu.vn"
    password = "toeu xjcj wgog lyav"  # Thay b·∫±ng App Password c·ªßa b·∫°n

    message = MIMEMultipart()
    message["From"] = sender_email
    message["To"] = receiver_email
    message["Subject"] = subject

    message.attach(MIMEText(body, "plain"))

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(sender_email, password)
            server.sendmail(sender_email, receiver_email, message.as_string())
        return True
    except Exception as e:
        st.error(f"L·ªói khi g·ª≠i email: {str(e)}")
        return False


def text_to_speech(text, filename="temp_speech.mp3", language='vi'):
    """Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v√† ph√°t"""
    try:
        if os.path.exists(filename):
            try:
                os.remove(filename)
            except PermissionError:
                print("Kh√¥ng th·ªÉ x√≥a file c≈©")
                return False
        tts = gTTS(text=text, lang=language, slow=False)
        tts.save(filename)
        pygame.mixer.music.load(filename)
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)
        return True
    except Exception as e:
        st.error(f"L·ªói trong text_to_speech: {str(e)}")
        return False


def recognize_speech():
    """
    Nh·∫≠n di·ªán gi·ªçng n√≥i v√† chuy·ªÉn ƒë·ªïi th√†nh vƒÉn b·∫£n.
    """
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("N√≥i g√¨ ƒë√≥: ")
        audio = r.listen(source)

    try:
        text = r.recognize_google(audio, language="vi-VI")
        return text
    except sr.UnknownValueError:
        return "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c gi·ªçng n√≥i."
    except sr.RequestError:
        return "L·ªói k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• nh·∫≠n di·ªán gi·ªçng n√≥i."


def show_flashcards():
    # X√°c ƒë·ªãnh lo·∫°i flashcard d·ª±a tr√™n m√¥n h·ªçc ƒë∆∞·ª£c ch·ªçn
    if st.session_state.selected_subject == "Ti·∫øng Anh":
        flashcards = load_data(FLASHCARDS_FILE)
        lang = "en"
    elif st.session_state.selected_subject == "Ti·∫øng Nh·∫≠t":
        flashcards = load_data("data/flashcards_japanese.json")
        lang = "ja"
    else:
        st.warning("Flashcard kh√¥ng kh·∫£ d·ª•ng cho m√¥n h·ªçc n√†y")
        return

    random.shuffle(flashcards)

    # CSS ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng l·∫≠t th·∫ª (gi·ªØ nguy√™n nh∆∞ c≈©)
    st.markdown(
        """
        <style>
            .flashcard-container {
                perspective: 1000px;
                width: 300px;
                height: 200px;
                margin: 0 auto;
                cursor: pointer;
            }
            .flashcard {
                width: 100%;
                height: 100%;
                position: relative;
                transform-style: preserve-3d;
                transition: transform 0.5s;
            }
            .flashcard:hover {
                transform: rotateY(180deg);
            }
            .flashcard-front, .flashcard-back {
                position: absolute;
                width: 100%;
                height: 100%;
                backface-visibility: hidden;
                display: flex;
                justify-content: center;
                align-items: center;
                font-size: 36px;
                font-weight: bold;
                color: #fff;
                border-radius: 15px;
            }
            .flashcard-front {
                background-color: #FFEB3B;
            }
            .flashcard-back {
                background-color: #03A9F4;
                transform: rotateY(180deg);
            }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.markdown(
        f"<h1 style='text-align: center; color: #4CAF50;'>üÉè Flashcard {st.session_state.selected_subject} (L·∫≠t th·∫ª)</h1>",
        unsafe_allow_html=True)

    # Tr·∫°ng th√°i th·∫ª
    if "index" not in st.session_state:
        st.session_state.index = 0
        st.session_state.should_speak = True
    elif "last_index" not in st.session_state or st.session_state.last_index != st.session_state.index:
        st.session_state.should_speak = True
        st.session_state.last_index = st.session_state.index
    else:
        st.session_state.should_speak = False

    card = flashcards[st.session_state.index]
    word = card["word"]
    meaning = card["meaning"]

    # Th√™m romaji n·∫øu c√≥ (cho ti·∫øng Nh·∫≠t)
    romaji = card.get("romaji", "")

    # Hi·ªÉn th·ªã flashcard v·ªõi hi·ªáu ·ª©ng l·∫≠t
    st.markdown(f"""
    <div class="flashcard-container" onclick="window.location.reload();">
        <div class="flashcard">
            <div class="flashcard-front">{word}</div>
            <div class="flashcard-back">{meaning}{f"<br><small>{romaji}</small>" if romaji else ""}</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Ch·ªâ ƒë·ªçc t·ª´ khi chuy·ªÉn sang th·∫ª m·ªõi
    if st.session_state.should_speak:
        text_to_speech(word, filename="japanese.mp3", language=lang)
        text_to_speech(meaning, filename="vietnamese.mp3", language="vi")
        if romaji:
            text_to_speech(romaji, filename="romaji.mp3", language="en")

    # N√∫t ti·∫øp theo
    if st.button("‚û°Ô∏è Ti·∫øp theo"):
        st.session_state.index = (st.session_state.index + 1) % len(flashcards)
        st.rerun()

    # H√†m x·ª≠ l√Ω nh·∫•n ph√≠m c√°ch (space bar)
    st.markdown("""
    <script>
        window.addEventListener('keydown', function(event) {
            if (event.code === 'Space') {
                window.location.reload();
            }
        });
    </script>
    """, unsafe_allow_html=True)


# ========== TRANG CH·ª¶ ==========
def home_page():
    """Hi·ªÉn th·ªã trang ch·ªß gi·ªõi thi·ªáu h·ªá th·ªëng"""
    # ======= CSS T√ôY CH·ªàNH =======
    st.markdown("""
    <style>
        /* Ti√™u ƒë·ªÅ ch√≠nh */
        .main-header {
            text-align: center;
            padding: 2rem;
            background: linear-gradient(135deg, #4CAF50 0%, #2E7D32 100%);
            color: white;
            border-radius: 15px;
            margin: 1rem 0;
            box-shadow: 0 4px 15px rgba(76,175,80,0.3);
        }

        /* Card gi·ªõi thi·ªáu */
        .feature-card {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            margin: 1.5rem 0;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            border: 1px solid #e0e0e0;
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        /* N√∫t l·ªõp h·ªçc */
        .class-card {
            padding: 2rem;
            border-radius: 15px;
            background: linear-gradient(145deg, #f5f5f5 0%, #ffffff 100%);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            text-align: center;
            min-height: 180px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .class-card:hover {
            transform: scale(1.03);
            box-shadow: 0 8px 25px rgba(76,175,80,0.2);
            background: linear-gradient(145deg, #e8f5e9 0%, #ffffff 100%);
        }

        /* H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng */
        .guide-step {
            padding: 1.5rem;
            background: #f8f9fa;
            border-left: 4px solid #4CAF50;
            margin: 1rem 0;
            border-radius: 8px;
        }

        /* Th√¥ng tin li√™n h·ªá */
        .contact-card {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 2rem;
            margin-top: 2rem;
            text-align: center;
        }

        .badge {
            display: inline-block;
            padding: 0.5rem 1rem;
            background: #4CAF50;
            color: white;
            border-radius: 20px;
            margin: 0.5rem;
            font-size: 0.9rem;
        }
    </style>
    """, unsafe_allow_html=True)

    # ======= PH·∫¶N N·ªòI DUNG =======
    # Header ch√≠nh
    st.markdown("""
    <div class="main-header">
        <h1 style="margin:0; font-size:2.5rem">üìö H·ªá th·ªëng k√≠ch th√≠ch t∆∞ duy h·ªçc t·∫≠p v√† h·ªó tr·ª£ ƒëi·ªÅu ch·ªânh t∆∞ th·∫ø ng·ªìi th√¥ng minh d√†nh cho ng∆∞·ªùi khi·∫øm th·ªã</h1>
    </div>
    """, unsafe_allow_html=True)

    # Gi·ªõi thi·ªáu h·ªá th·ªëng
    with st.container():
        st.markdown("""
        <div class="feature-card">
            <h3 style="color:#2E7D32; margin-top:0">üåê Gi·ªõi Thi·ªáu H·ªá Th·ªëng</h3>
            <p style="font-size:1.05rem; line-height:1.6">
            H·ªá th·ªëng t√≠ch h·ª£p c√¥ng ngh·ªá AI ti√™n ti·∫øn h·ªó tr·ª£ h·ªçc t·∫≠p ƒëa ph∆∞∆°ng th·ª©c v·ªõi:
            </p>
            <div style="display: flex; gap:1rem; flex-wrap:wrap;">
                <span class="badge">üé§ Nh·∫≠n di·ªán gi·ªçng n√≥i</span>
                <span class="badge">üìñ H·ªçc li·ªáu ƒëa d·∫°ng</span>
                <span class="badge">ü§ñ Tr·ª£ l√Ω ·∫£o th√¥ng minh</span>
                <span class="badge">üìä B√°o c√°o h·ªçc t·∫≠p</span>
            </div>
        </div>
        """, unsafe_allow_html=True)

        if st.button("üîä Nghe gi·ªõi thi·ªáu h·ªá th·ªëng", use_container_width=True):
            intro_text = """H·ªá th·ªëng h·ªçc t·∫≠p th√¥ng minh phi√™n b·∫£n 2.0 ƒë∆∞·ª£c ph√°t tri·ªÉn ƒë·∫∑c bi·ªát d√†nh cho ng∆∞·ªùi khi·∫øm th·ªã, 
            t√≠ch h·ª£p c√°c c√¥ng ngh·ªá ti√™n ti·∫øn nh∆∞ tr√≠ tu·ªá nh√¢n t·∫°o, x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n v√† h·ªá th·ªëng t∆∞∆°ng t√°c ƒëa ph∆∞∆°ng th·ª©c."""
            text_to_speech(intro_text)

    # L·ªõp h·ªçc
    st.markdown("### üìö Ch·ªçn L·ªõp H·ªçc")
    cols = st.columns(3)
    class_info = {
        1: {"color": "#4CAF50", "icon": "üßÆ"},
        2: {"color": "#2196F3", "icon": "üìö"},
        3: {"color": "#9C27B0", "icon": "üåç"},
        4: {"color": "#FF9800", "icon": "‚öõÔ∏è"},
        5: {"color": "#E91E63", "icon": "üé®"}
    }

    for i in range(1, 6):
        with cols[(i - 1) % 3]:
            info = class_info[i]
            html = f"""
            <div class="class-card" onclick="window.location.href='?class={i}'">
                <div style="font-size:2.5rem; margin-bottom:1rem">{info['icon']}</div>
                <h3 style="margin:0; color:{info['color']}">L·ªõp {i}</h3>
            </div>
            """
            st.markdown(html, unsafe_allow_html=True)

    # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    with st.expander("üìò H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng Chi Ti·∫øt", expanded=False):
        st.markdown("""
        <div class="guide-step">
            <h4>üéØ B∆∞·ªõc 1: Ch·ªçn ch·ª©c nƒÉng</h4>
            <p>S·ª≠ d·ª•ng menu b√™n tr√°i ƒë·ªÉ ch·ªçn c√°c ch·ª©c nƒÉng ch√≠nh c·ªßa h·ªá th·ªëng</p>
        </div>

        <div class="guide-step">
            <h4>üìñ B∆∞·ªõc 2: H·ªçc t·∫≠p</h4>
            <p>‚Ä¢ Ch·ªçn m√¥n h·ªçc v√† b√†i h·ªçc t·ª´ th∆∞ vi·ªán<br>
            ‚Ä¢ S·ª≠ d·ª•ng n√∫t üîä ƒë·ªÉ nghe n·ªôi dung<br>
            ‚Ä¢ T∆∞∆°ng t√°c b·∫±ng gi·ªçng n√≥i v·ªõi n√∫t üé§</p>
        </div>

        <div class="guide-step">
            <h4>üß† B∆∞·ªõc 3: Ki·ªÉm tra</h4>
            <p>‚Ä¢ L√†m b√†i ki·ªÉm tra ki·∫øn th·ª©c<br>
            ‚Ä¢ Xem k·∫øt qu·∫£ chi ti·∫øt<br>
            ‚Ä¢ Xu·∫•t b√°o c√°o h·ªçc t·∫≠p</p>
        </div>
        """, unsafe_allow_html=True)

    # Th√¥ng tin li√™n h·ªá
    st.markdown("""
    <div class="contact-card">
        <h3 style="margin-top:0">üì¨ Li√™n H·ªá H·ªó Tr·ª£</h3>
        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap:1rem;">
            <div style="padding:1rem; background:#fff; border-radius:10px;">
                <h4 style="margin:0 0 0.5rem 0">üíå Email</h4>
                <p style="margin:0">support@hocsinhthongminh.vn</p>
            </div>
            <div style="padding:1rem; background:#fff; border-radius:10px;">
                <h4 style="margin:0 0 0.5rem 0">üìû Hotline</h4>
                <p style="margin:0">1900 1234 (24/7)</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

# ========== GIAO DI·ªÜN B√ÄI H·ªåC ==========
def show_lessons():
    """Hi·ªÉn th·ªã giao di·ªán b√†i h·ªçc v·ªõi c√°c card m√¥n h·ªçc c√≥ th·ªÉ ch·ªçn ƒë∆∞·ª£c"""
    st.markdown("""
    <style>
        /* CSS t√πy ch·ªânh cho to√†n b·ªô trang */
        .main-title {
            text-align: center; 
            color: #4CAF50; 
            margin-bottom: 30px;
            font-size: 2.2rem;
            font-weight: 600;
        }
        .subject-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .subject-card {
            aspect-ratio: 1 / 1;
            border-radius: 12px;
            background: linear-gradient(145deg, #4CAF50 0%, #81C784 100%);
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-size: 1.4rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            border: none;
            padding: 20px;
            text-align: center;
        }
        .subject-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.15);
            background: linear-gradient(145deg, #388E3C 0%, #66BB6A 100%);
        }
        .subject-card:active {
            transform: translateY(0);
        }
        .subject-icon {
            font-size: 2.5rem;
            margin-bottom: 15px;
        }
        .select-prompt {
            text-align: center;
            font-size: 1.2rem;
            color: #555;
            margin-bottom: 10px;
        }
        .empty-state {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        .flashcard-btn {
            background: linear-gradient(145deg, #2196F3 0%, #03A9F4 100%) !important;
            color: white !important;
            font-size: 1.2rem !important;
            font-weight: 600 !important;
            padding: 15px 25px !important;
            border-radius: 12px !important;
            margin: 20px auto !important;
            display: block !important;
            width: 80% !important;
            box-shadow: 0 4px 12px rgba(33, 150, 243, 0.3) !important;
        }
        .flashcard-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(33, 150, 243, 0.4) !important;
        }
    </style>
    """, unsafe_allow_html=True)

    st.markdown('<h1 class="main-title">üìö B√†i H·ªçc</h1>', unsafe_allow_html=True)

    lessons = load_data(LESSONS_FILE)
    if not lessons:
        st.markdown('<div class="empty-state">Hi·ªán ch∆∞a c√≥ b√†i h·ªçc n√†o ƒë∆∞·ª£c t·∫°o!</div>', unsafe_allow_html=True)
        return

    # L·∫•y danh s√°ch m√¥n h·ªçc v√† s·∫Øp x·∫øp theo th·ª© t·ª± alphabet
    subjects = sorted(list(set(lesson["mon_hoc"] for lesson in lessons)))

    # Icon t∆∞∆°ng ·ª©ng cho t·ª´ng m√¥n h·ªçc
    subject_icons = {
        "To√°n": "üßÆ",
        "VƒÉn": "üìù",
        "Ti·∫øng Nh·∫≠t": "üóæ",
        "Anh": "üåé",
        "L√Ω": "‚öõÔ∏è",
        "H√≥a": "üß™",
        "Sinh": "üß¨",
        "S·ª≠": "üèõÔ∏è",
        "ƒê·ªãa": "üåç",
        "ƒê·∫°o ƒë·ª©c": "‚ù§Ô∏è",
        "GDCD": "‚öñÔ∏è",
        "Tin h·ªçc": "üíª",
        "C√¥ng ngh·ªá": "üîß",
        "M·ªπ thu·∫≠t": "üé®",
        "√Çm nh·∫°c": "üéµ",
        "Th·ªÉ d·ª•c": "üèÉ"
    }

    st.markdown('<div class="select-prompt">Vui l√≤ng ch·ªçn m√¥n h·ªçc</div>', unsafe_allow_html=True)

    # Hi·ªÉn th·ªã grid c√°c m√¥n h·ªçc
    st.markdown('<div class="subject-grid">', unsafe_allow_html=True)

    # T·∫°o c√°c card m√¥n h·ªçc c√≥ th·ªÉ click ƒë∆∞·ª£c
    cols = st.columns(3)
    subjects_to_show = subjects + ["Ti·∫øng Nh·∫≠t"]  # Th√™m m√¥n Ti·∫øng Nh·∫≠t v√†o danh s√°ch hi·ªÉn th·ªã

    for i, subject in enumerate(subjects_to_show):
    # for i, subject in enumerate(subjects):
        icon = subject_icons.get(subject, "üìö")

        with cols[i % 3]:
            # S·ª≠ d·ª•ng st.button v·ªõi HTML custom ƒë·ªÉ c√≥ giao di·ªán ƒë·∫πp
            if st.button(
                f"{icon}\n\n{subject}",  # S·ª≠ d·ª•ng \n ƒë·ªÉ xu·ªëng d√≤ng
                key=f"subject_{subject}",
                # help=f"Ch·ªçn m√¥n {subject}",
                use_container_width=True
            ):
                st.session_state.selected_subject = subject
                text_to_speech(f"B·∫°n ƒë√£ ch·ªçn m√¥n {subject}")
                st.rerun()  # L√†m m·ªõi trang ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung m√¥n h·ªçc

    st.markdown('</div>', unsafe_allow_html=True)

    # Ki·ªÉm tra n·∫øu ƒë√£ ch·ªçn m√¥n h·ªçc
    if 'selected_subject' not in st.session_state:
        st.markdown('<div class="empty-state">Vui l√≤ng ch·ªçn m·ªôt m√¥n h·ªçc t·ª´ danh s√°ch tr√™n</div>',
                    unsafe_allow_html=True)
        text_to_speech("Ch·ªçn m√¥n h·ªçc b·∫°n mu·ªën h·ªçc")

        return

    # N√∫t quay l·∫°i ch·ªçn m√¥n kh√°c
    if st.button("‚Ü©Ô∏è Ch·ªçn m√¥n kh√°c"):
        del st.session_state.selected_subject
        st.rerun()

    # TH√äM N√öT LUY·ªÜN T·∫¨P FLASHCARD N·∫æU L√Ä M√îN TI·∫æNG ANH
    if st.session_state.selected_subject in ["Ti·∫øng Anh", "Ti·∫øng Nh·∫≠t"]:
        btn_text = {
            "Ti·∫øng Anh": "üÉè Luy·ªán T·∫≠p Flashcard Ti·∫øng Anh",
            "Ti·∫øng Nh·∫≠t": "üóæ Luy·ªán T·∫≠p Flashcard Ti·∫øng Nh·∫≠t"
        }[st.session_state.selected_subject]

        if st.button(btn_text, key="flashcard_btn", use_container_width=True):
            st.session_state.show_flashcards = True
            st.rerun()

    # N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô xem flashcard
    if st.session_state.get("show_flashcards"):
        print("*************************************************************************")
        show_flashcards()
        return

    # Ph·∫ßn hi·ªÉn th·ªã b√†i h·ªçc sau khi ch·ªçn m√¥n
    subject_lessons = [lesson for lesson in lessons if lesson["mon_hoc"] == st.session_state.selected_subject]
    if st.session_state.selected_subject == "Ti·∫øng Nh·∫≠t" and not subject_lessons:
        st.info("Hi·ªán ch∆∞a c√≥ b√†i h·ªçc n√†o cho m√¥n Ti·∫øng Nh·∫≠t")

        # Ch·ªâ hi·ªÉn th·ªã n√∫t flashcard
        if st.button("üóæ Luy·ªán T·∫≠p Flashcard Ti·∫øng Nh·∫≠t",
                     key="flashcard_btn_jp",
                     use_container_width=True):
            st.session_state.show_flashcards = True
            st.rerun()
        return
    # CSS cho tabs b√†i h·ªçc
    st.markdown("""
    <style>
        .lesson-tabs {
            border-radius: 12px;
            overflow: hidden;
            margin-top: 30px;
        }
        .lesson-tab {
            padding: 15px 25px;
            font-size: 1.1rem;
        }
        .lesson-content {
            padding: 25px;
            background: #f9f9f9;
            border-radius: 0 0 12px 12px;
            margin-top: -1px;
        }
        .lesson-title {
            font-size: 1.6rem;
            color: #2E7D32;
            margin-bottom: 15px;
        }
        .lesson-desc {
            font-size: 1.1rem;
            line-height: 1.6;
            color: #444;
        }
    </style>
    """, unsafe_allow_html=True)

    # T·∫°o tabs b√†i h·ªçc
    tab_titles = [lesson["ten_bai"] for lesson in subject_lessons]
    tabs = st.tabs(tab_titles)

    for i, tab in enumerate(tabs):
        with tab:
            lesson = subject_lessons[i]
            st.markdown(f'<div class="lesson-title">{lesson["ten_bai"]}</div>', unsafe_allow_html=True)

            # B·ªë c·ª•c 2 c·ªôt
            col1, col2 = st.columns([1, 2])

            with col1:
                if "hinh_anh" in lesson:
                    st.image(lesson["hinh_anh"], use_container_width=True)

            with col2:
                if "mo_ta" in lesson:
                    st.markdown(f'<div class="lesson-desc">{lesson["mo_ta"]}</div>', unsafe_allow_html=True)

                if "noi_dung_text" in lesson:
                    with st.expander("üìñ N·ªôi dung b√†i h·ªçc", expanded=True):
                        st.markdown(lesson["noi_dung_text"])
                        # Nh√≥m c√°c n√∫t ch·ª©c nƒÉng
                btn_col1, btn_col2 = st.columns(2)
                with btn_col1:
                    if st.button(
                            "üîä ƒê·ªçc b√†i",
                            key=f"read_{i}",
                            # help="Nh·∫•n ƒë·ªÉ nghe n·ªôi dung b√†i h·ªçc",
                            use_container_width=True
                    ):
                        text_to_speech(lesson.get("noi_dung_text", ""))

                with btn_col2:
                    if st.button(
                            "üé§ Gi·ªçng n√≥i",
                            key=f"voice_{i}",
                            # help="Nh·∫•n ƒë·ªÉ ƒëi·ªÅu khi·ªÉn b·∫±ng gi·ªçng n√≥i",
                            use_container_width=True
                    ):
                        text_to_speech("H√£y n√≥i l·ªánh c·ªßa b·∫°n")
                        command = recognize_speech()
                        if command:
                            if "ƒë·ªçc b√†i" in command or "ƒë·ªçc n·ªôi dung" in command:
                                text_to_speech(lesson.get("noi_dung_text", ""))
                            elif "g·ª≠i c√¢u h·ªèi" in command:
                                st.session_state.voice_question = True
            # X·ª≠ l√Ω g·ª≠i c√¢u h·ªèi
            if st.session_state.get("voice_question"):
                text_to_speech("H√£y n√≥i c√¢u h·ªèi c·ªßa b·∫°n")
                question = recognize_speech()
                if question:
                    email_content = f"""
                    H·ªçc vi√™n c√≥ c√¢u h·ªèi v·ªÅ b√†i h·ªçc:
                    - M√¥n: {st.session_state.selected_subject}
                    - B√†i: {lesson['ten_bai']}
                    - C√¢u h·ªèi: {question}
                    """
                    if send_email(f"C√¢u h·ªèi v·ªÅ b√†i {lesson['ten_bai']}", email_content,
                                  "nguyentranminhtam04@gmail.com"):
                        st.success("ƒê√£ g·ª≠i c√¢u h·ªèi ƒë·∫øn gi√°o vi√™n!")
                        text_to_speech("ƒê√£ g·ª≠i c√¢u h·ªèi ƒë·∫øn gi√°o vi√™n")
                    st.session_state.voice_question = False
# ========== GIAO DI·ªÜN QUIZ ==========
def quiz_interface():
    """Giao di·ªán l√†m b√†i quiz v·ªõi l·ª±a ch·ªçn m√¥n h·ªçc"""
    st.markdown("<h1 style='text-align: center; color: #4CAF50;'>üß† Ki·ªÉm tra ki·∫øn th·ª©c</h1>", unsafe_allow_html=True)

    # Kh·ªüi t·∫°o session state
    if 'quiz_state' not in st.session_state:
        st.session_state.quiz_state = {
            "started": False,
            "subject_selected": False,
            "subject": None,
            "submitted": False,
            "questions": [],
            "answers": {},
            "start_time": None,
            "current_question": 0,
            "first_time_enter": True
        }

    # Ph·∫ßn ch·ªçn m√¥n h·ªçc n·∫øu ch∆∞a ch·ªçn
    if st.session_state.quiz_state["first_time_enter"]:
        text_to_speech("Ch·ªçn m√¥n h·ªçc b·∫°n mu·ªën ki·ªÉm tra")
        st.session_state.quiz_state["first_time_enter"] = False  # ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
    if not st.session_state.quiz_state["subject_selected"]:
        st.markdown("### Ch·ªçn m√¥n h·ªçc b·∫°n mu·ªën ki·ªÉm tra:")
        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("üìê To√°n", use_container_width=True):
                st.session_state.quiz_state.update({
                    "subject": "to√°n",
                    "subject_selected": True
                })
                st.rerun()

        with col2:
            if st.button("‚ù§Ô∏è ƒê·∫°o ƒë·ª©c", use_container_width=True):
                st.session_state.quiz_state.update({
                    "subject": "ƒë·∫°o ƒë·ª©c",
                    "subject_selected": True
                })
                st.rerun()

        with col3:
            if st.button("üåé Ti·∫øng Anh", use_container_width=True):
                st.session_state.quiz_state.update({
                    "subject": "anh vƒÉn",
                    "subject_selected": True
                })
                st.rerun()
        return

    # Ph·∫ßn nh·∫≠p t√™n n·∫øu ƒë√£ ch·ªçn m√¥n nh∆∞ng ch∆∞a b·∫Øt ƒë·∫ßu
    if not st.session_state.quiz_state["started"]:
        # Hi·ªÉn th·ªã th√¥ng b√°o ch·ªâ 1 l·∫ßn
        if "name_prompt_shown" not in st.session_state:
            text_to_speech("B·∫°n t√™n g√¨")
            st.session_state.name_prompt_shown = True

        # N√∫t nh·∫≠p t√™n b·∫±ng gi·ªçng n√≥i (ƒë·∫∑t b√™n ngo√†i form)
        if st.button("üé§ Nh·∫≠p t√™n b·∫±ng gi·ªçng n√≥i", key="voice_name_btn"):
            text_to_speech("Xin h√£y n√≥i t√™n c·ªßa b·∫°n")
            recognized_name = recognize_speech()
            if recognized_name:
                # X·ª≠ l√Ω t√™n nh·∫≠n ƒë∆∞·ª£c t·ª´ gi·ªçng n√≥i
                processed_name = recognized_name.strip().title()
                st.session_state.temp_recognized_name = processed_name
                st.rerun()

        # Form nh·∫≠p t√™n ch√≠nh
        with st.form("start_form"):
            # N·∫øu c√≥ t√™n t·ª´ gi·ªçng n√≥i, ƒëi·ªÅn v√†o √¥ input
            username = st.text_input(
                "Nh·∫≠p t√™n c·ªßa b·∫°n:",
                value=st.session_state.get("temp_recognized_name", ""),
                placeholder="T√™n c·ªßa b·∫°n...",
                max_chars=20
            )

            submitted = st.form_submit_button("B·∫Øt ƒë·∫ßu l√†m b√†i")

            if submitted:
                if username.strip():
                    # X√°c ƒë·ªãnh file c√¢u h·ªèi d·ª±a tr√™n m√¥n ƒë√£ ch·ªçn
                    subject_file = {
                        "to√°n": "data/toan.json",
                        "ƒë·∫°o ƒë·ª©c": "data/ƒë·∫°o ƒë·ª©c.json",
                        "anh vƒÉn": "data/anh_van.json"
                    }.get(st.session_state.quiz_state["subject"], "data/questions.json")

                    st.session_state.quiz_state.update({
                        "started": True,
                        "username": username.strip(),
                        "start_time": time.time(),
                        "questions": load_data(subject_file)
                    })
                    random.shuffle(st.session_state.quiz_state["questions"])
                    text_to_speech(
                        f"Ch√†o m·ª´ng {username.strip()} ƒë·∫øn v·ªõi b√†i ki·ªÉm tra m√¥n {st.session_state.quiz_state['subject']}")
                    st.rerun()
                else:
                    st.error("Vui l√≤ng nh·∫≠p t√™n h·ª£p l·ªá!")
                    text_to_speech("Vui l√≤ng nh·∫≠p t√™n h·ª£p l·ªá")
        return

    # L√†m b√†i quiz (ph·∫ßn n√†y gi·ªØ nguy√™n nh∆∞ c≈©)
    quiz_state = st.session_state.quiz_state
    questions = quiz_state["questions"]
    current_q = quiz_state["current_question"]

    if current_q < len(questions):
        question = questions[current_q]

        st.markdown(f"### C√¢u {current_q + 1}/{len(questions)}")
        st.markdown(f"**{question['cau_hoi']}**")

        # ƒê·ªçc c√¢u h·ªèi v√† ƒë√°p √°n
        # ƒê·ªçc c√¢u h·ªèi v√† ƒë√°p √°n
        if st.button(f"üîä ƒê·ªçc c√¢u h·ªèi {current_q + 1}"):
            question_text = f"C√¢u {current_q + 1}: {question['cau_hoi']}"
            options = " ".join([f"ƒê√°p √°n {chr(65 + i)}: {option}." for i, option in enumerate(question['dap_an'])])
            full_text = f"{question_text} {options}"
            text_to_speech(full_text)

        # Hi·ªÉn th·ªã h√¨nh ·∫£nh n·∫øu c√≥
        if "hinh_anh" in question:
            st.image(question["hinh_anh"], width=300)
            # text_to_speech("H√¨nh ·∫£nh minh h·ªça cho c√¢u h·ªèi")

        # Hi·ªÉn th·ªã ƒë√°p √°n
        answer_key = f"q_{current_q}"
        if answer_key not in quiz_state["answers"]:
            quiz_state["answers"][answer_key] = None

        quiz_state["answers"][answer_key] = st.radio(
            "Ch·ªçn ƒë√°p √°n:",
            question["dap_an"],
            index=None if quiz_state["answers"][answer_key] is None else
            question["dap_an"].index(quiz_state["answers"][answer_key]),
            key=answer_key
        )

        # N√∫t tr·∫£ l·ªùi b·∫±ng gi·ªçng n√≥i
        if st.button(f"üé§ Tr·∫£ l·ªùi b·∫±ng gi·ªçng n√≥i - C√¢u {current_q + 1}"):
            text_to_speech("H√£y n√≥i ƒë√°p √°n c·ªßa b·∫°n, A, B, C ho·∫∑c D")
            answer = recognize_speech().split(" ")[1]
            print(answer)
            if answer:
                if answer in ["a", "b", "c", "d"]:
                    selected_index = ord(answer.upper()) - ord("A")
                    if selected_index < len(question["dap_an"]):
                        quiz_state["answers"][answer_key] = question["dap_an"][selected_index]
                        st.success(f"ƒê√£ ch·ªçn ƒë√°p √°n {answer.upper()}")
                        text_to_speech(f"ƒê√£ ch·ªçn ƒë√°p √°n {answer.upper()}")
                    else:
                        st.warning("ƒê√°p √°n kh√¥ng h·ª£p l·ªá")
                        text_to_speech("ƒê√°p √°n kh√¥ng h·ª£p l·ªá")
                else:
                    st.warning("Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ƒë√°p √°n h·ª£p l·ªá")
                    text_to_speech("Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ƒë√°p √°n h·ª£p l·ªá")

        # Hi·ªÉn th·ªã gi·∫£i th√≠ch ƒë√°p √°n (n·∫øu ƒë√£ ch·ªçn ƒë√°p √°n)
        if quiz_state["answers"][answer_key] is not None:
            # Ki·ªÉm tra xem c√¢u tr·∫£ l·ªùi ƒë√∫ng hay sai
            is_correct = (quiz_state["answers"][answer_key] ==
                          question["dap_an"][ord(question["dap_an_dung"]) - ord("A")])

            # T·∫°o expander cho gi·∫£i th√≠ch
            with st.expander("üìù Gi·∫£i th√≠ch ƒë√°p √°n", expanded=False):
                if "giai_thich" in question:
                    st.markdown(f"**Gi·∫£i th√≠ch:** {question['giai_thich']}")

                    # ƒê·ªçc gi·∫£i th√≠ch b·∫±ng gi·ªçng n√≥i
                    if st.button(f"üîä Nghe gi·∫£i th√≠ch - C√¢u {current_q + 1}"):
                        explanation_text = f"Gi·∫£i th√≠ch: {question['giai_thich']}"
                        text_to_speech(explanation_text)
                else:
                    st.info("Kh√¥ng c√≥ gi·∫£i th√≠ch cho c√¢u h·ªèi n√†y.")

                st.markdown(f"**ƒê√°p √°n ƒë√∫ng:** {question['dap_an_dung']}")

                # Hi·ªÉn th·ªã th√¥ng b√°o ƒë√∫ng/sai
                if is_correct:
                    st.success("üéâ B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng!")
                else:
                    st.error("‚ùå B·∫°n ƒë√£ tr·∫£ l·ªùi sai.")

        # N√∫t ƒëi·ªÅu h∆∞·ªõng
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚è™ C√¢u tr∆∞·ªõc", disabled=current_q == 0):
                quiz_state["current_question"] -= 1
                st.rerun()
        with col3:
            if st.button("‚è© C√¢u ti·∫øp", disabled=current_q == len(questions) - 1):
                quiz_state["current_question"] += 1
                st.rerun()
        with col2:
            if st.button("üéØ N·ªôp b√†i", type="primary"):
                quiz_state["submitted"] = True
                quiz_state["end_time"] = time.time()
                st.rerun()

    # X·ª≠ l√Ω sau khi n·ªôp b√†i (gi·ªØ nguy√™n nh∆∞ c≈©)
    if quiz_state["submitted"]:
        # T√≠nh ƒëi·ªÉm
        score = sum(
            1 for i, q in enumerate(questions)
            if quiz_state["answers"].get(f"q_{i}") == q["dap_an"][ord(q["dap_an_dung"]) - ord("A")]
        )

        # L∆∞u k·∫øt qu·∫£ (th√™m th√¥ng tin m√¥n h·ªçc v√†o k·∫øt qu·∫£)
        time_taken = quiz_state["end_time"] - quiz_state["start_time"]
        results = load_data(RESULTS_FILE)
        results.append({
            "username": quiz_state["username"],
            "subject": quiz_state["subject"],
            "score": score,
            "total": len(questions),
            "time_taken": time_taken,
            "timestamp": datetime.now().isoformat()
        })
        save_data(RESULTS_FILE, results)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        subject_name = {
            "toan": "To√°n",
            "dao_duc": "ƒê·∫°o ƒë·ª©c",
            "anh_van": "Ti·∫øng Anh"
        }.get(quiz_state["subject"], "M√¥n h·ªçc")

        result_text = f"""
        {quiz_state['username']} ƒë√£ ho√†n th√†nh b√†i ki·ªÉm tra m√¥n {subject_name}!
        ƒêi·ªÉm s·ªë: {score}/{len(questions)} ({score / len(questions) * 100:.1f}%)
        Th·ªùi gian: {int(time_taken // 60)} ph√∫t {int(time_taken % 60)} gi√¢y
        """
        st.success(result_text)
        text_to_speech(result_text)

        # G·ª≠i email k·∫øt qu·∫£
        if st.button("üì§ G·ª≠i k·∫øt qu·∫£ ƒë·∫øn gi√°o vi√™n"):
            email_content = f"""
            H·ªçc vi√™n {quiz_state['username']} ƒë√£ ho√†n th√†nh b√†i ki·ªÉm tra m√¥n {subject_name}:
            - ƒêi·ªÉm s·ªë: {score}/{len(questions)}
            - T·ªâ l·ªá ƒë√∫ng: {score / len(questions) * 100:.1f}%
            - Th·ªùi gian l√†m b√†i: {int(time_taken // 60)} ph√∫t {int(time_taken % 60)} gi√¢y
            """
            if send_email(f"K·∫øt qu·∫£ b√†i ki·ªÉm tra {subject_name} c·ªßa {quiz_state['username']}", email_content,
                          "nguyentranminhtam04@gmail.com"):
                st.success("ƒê√£ g·ª≠i k·∫øt qu·∫£ ƒë·∫øn gi√°o vi√™n!")
                text_to_speech("ƒê√£ g·ª≠i k·∫øt qu·∫£ ƒë·∫øn gi√°o vi√™n")

        if st.button("üîÑ L√†m l·∫°i b√†i"):
            st.session_state.quiz_state = {
                "started": False,
                "subject_selected": False,
                "subject": None,
                "questions": [],
                "answers": {}
            }
            st.rerun()


# ========== GIAO DI·ªÜN H·ªñ TR·ª¢ ==========
def support_page():
    """Hi·ªÉn th·ªã trang h·ªó tr·ª£ g·ª≠i mail cho gi√°o vi√™n b·∫±ng gi·ªçng n√≥i"""
    st.markdown("<h1 style='text-align: center; color: #4CAF50;'>üìß H·ªó tr·ª£ h·ªçc t·∫≠p</h1>", unsafe_allow_html=True)

    # Danh s√°ch gi√°o vi√™n
    TEACHERS = {
        "Nguy·ªÖn Tr·∫ßn Minh T√¢m": "nguyentranminhtam04@gmail.com",
        "ƒêinh Th·ªã Gi√†u": "dinhthigiau.contact@gmail.com"
    }

    # Kh·ªüi t·∫°o session state n·∫øu ch∆∞a c√≥
    if 'support_state' not in st.session_state:
        st.session_state.support_state = {
            "selected_teacher": None,
            "email_content": "",
            "is_recording": False,
            "first_time_enter": True
        }

    # Ph·∫ßn ch·ªçn m√¥n h·ªçc n·∫øu ch∆∞a ch·ªçn
    if st.session_state.support_state["first_time_enter"]:
        text_to_speech("H·ªó tr·ª£ h·ªçc t·∫≠p")
        st.session_state.support_state["first_time_enter"] = False  # ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
    # CSS t√πy ch·ªânh
    st.markdown("""
    <style>
        .teacher-card {
            border-radius: 10px;
            padding: 15px;
            margin: 10px 0;
            background-color: #f0f2f6;
            transition: all 0.3s;
        }
        .teacher-card:hover {
            background-color: #e0e5ec;
            transform: translateY(-2px);
        }
        .teacher-selected {
            background-color: #4CAF50 !important;
            color: white !important;
        }
        .voice-btn {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
        }
    </style>
    """, unsafe_allow_html=True)

    # Ph·∫ßn 1: Ch·ªçn gi√°o vi√™n
    st.markdown("### 1. Ch·ªçn gi√°o vi√™n c·∫ßn h·ªó tr·ª£")
    # text_to_speech("Ch·ªçn gi√°o vi√™n c·∫ßn h·ªó tr·ª£")
    # T·∫°o c√°c card gi√°o vi√™n
    cols = st.columns(2)
    for i, (teacher_name, teacher_email) in enumerate(TEACHERS.items()):
        with cols[i % 2]:
            is_selected = st.session_state.support_state["selected_teacher"] == teacher_name
            card_class = "teacher-card teacher-selected" if is_selected else "teacher-card"

            st.markdown(
                f"""
                <div class="{card_class}" onclick="window.location.href='?teacher={teacher_name}'">
                    <h4>{teacher_name}</h4>
                    <p>{teacher_email}</p>
                </div>
                """,
                unsafe_allow_html=True
            )

    # N√∫t ch·ªçn gi√°o vi√™n b·∫±ng gi·ªçng n√≥i
    if st.button("üé§ Ch·ªçn gi√°o vi√™n b·∫±ng gi·ªçng n√≥i", key="select_teacher_voice"):
        text_to_speech("H√£y n√≥i t√™n gi√°o vi√™n b·∫°n mu·ªën li√™n h·ªá")
        teacher_name = recognize_speech()
        if teacher_name:
            # T√¨m gi√°o vi√™n ph√π h·ª£p nh·∫•t v·ªõi t√™n ƒë∆∞·ª£c n√≥i
            best_match = None
            highest_score = 0
            for name in TEACHERS.keys():
                score = sum(1 for word in teacher_name.split() if word.lower() in name.lower())
                if score > highest_score:
                    highest_score = score
                    best_match = name

            if best_match:
                st.session_state.support_state["selected_teacher"] = best_match
                st.success(f"ƒê√£ ch·ªçn gi√°o vi√™n: {best_match}")
                text_to_speech(f"ƒê√£ ch·ªçn gi√°o vi√™n {best_match}")
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y gi√°o vi√™n ph√π h·ª£p")
                text_to_speech("Kh√¥ng t√¨m th·∫•y gi√°o vi√™n ph√π h·ª£p")

    # Hi·ªÉn th·ªã gi√°o vi√™n ƒë√£ ch·ªçn
    if st.session_state.support_state["selected_teacher"]:
        st.markdown(f"""
        <div style="background-color:#e8f5e9; padding:10px; border-radius:5px; margin:10px 0;">
            <b>Gi√°o vi√™n ƒë√£ ch·ªçn:</b> {st.session_state.support_state["selected_teacher"]}
            <br><b>Email:</b> {TEACHERS[st.session_state.support_state["selected_teacher"]]}
        </div>
        """, unsafe_allow_html=True)

    # Ph·∫ßn 2: Nh·∫≠p n·ªôi dung email
    st.markdown("### 2. N·ªôi dung c·∫ßn h·ªó tr·ª£")

    # Nh·∫≠p n·ªôi dung b·∫±ng gi·ªçng n√≥i
    if st.button("üé§ Nh·∫≠p n·ªôi dung b·∫±ng gi·ªçng n√≥i", key="input_content_voice"):
        st.session_state.support_state["is_recording"] = True
        st.warning("ƒêang ghi √¢m... H√£y n√≥i n·ªôi dung b·∫°n mu·ªën g·ª≠i")
        text_to_speech("H√£y n√≥i n·ªôi dung b·∫°n mu·ªën g·ª≠i cho gi√°o vi√™n")

        content = recognize_speech()
        if content:
            st.session_state.support_state["email_content"] = content
            st.session_state.support_state["is_recording"] = False
            st.success("ƒê√£ ghi nh·∫≠n n·ªôi dung!")
            text_to_speech("ƒê√£ ghi nh·∫≠n n·ªôi dung c·ªßa b·∫°n")

    # Hi·ªÉn th·ªã textarea ƒë·ªÉ ch·ªânh s·ª≠a n·ªôi dung
    email_content = st.text_area(
        "N·ªôi dung email:",
        value=st.session_state.support_state["email_content"],
        height=150,
        placeholder="Nh·∫≠p n·ªôi dung b·∫°n c·∫ßn h·ªó tr·ª£..."
    )
    st.session_state.support_state["email_content"] = email_content

    # Ph·∫ßn 3: G·ª≠i email
    st.markdown("### 3. G·ª≠i y√™u c·∫ßu h·ªó tr·ª£")

    if st.button("üì§ G·ª≠i email cho gi√°o vi√™n", type="primary"):
        if not st.session_state.support_state["selected_teacher"]:
            st.error("Vui l√≤ng ch·ªçn gi√°o vi√™n!")
            text_to_speech("Vui l√≤ng ch·ªçn gi√°o vi√™n")
        elif not st.session_state.support_state["email_content"].strip():
            st.error("Vui l√≤ng nh·∫≠p n·ªôi dung!")
            text_to_speech("Vui l√≤ng nh·∫≠p n·ªôi dung")
        else:
            teacher_name = st.session_state.support_state["selected_teacher"]
            teacher_email = TEACHERS[teacher_name]
            email_content = st.session_state.support_state["email_content"]

            # Th√™m th√¥ng tin ng∆∞·ªùi g·ª≠i v√†o n·ªôi dung email
            full_content = f"""
            H·ªçc sinh g·ª≠i y√™u c·∫ßu h·ªó tr·ª£:
            - Gi√°o vi√™n: {teacher_name}
            - N·ªôi dung: 
            {email_content}
            """

            if send_email(f"Y√™u c·∫ßu h·ªó tr·ª£ t·ª´ h·ªçc sinh", full_content, teacher_email):
                st.success("ƒê√£ g·ª≠i email th√†nh c√¥ng!")
                text_to_speech("ƒê√£ g·ª≠i email th√†nh c√¥ng cho gi√°o vi√™n")

                # Reset n·ªôi dung sau khi g·ª≠i
                st.session_state.support_state["email_content"] = ""
            else:
                st.error("G·ª≠i email th·∫•t b·∫°i!")
                text_to_speech("G·ª≠i email kh√¥ng th√†nh c√¥ng")


# ========== GIAO DI·ªÜN CH√çNH ==========
def main():
    st.sidebar.title("üè´ H·ªá th·ªëng H·ªçc t·∫≠p")
    menu = st.sidebar.radio(
        "Ch·ªçn ch·ª©c nƒÉng:",
        ["üè† Trang ch·ªß", "üìö B√†i h·ªçc", "üß† Ki·ªÉm tra ki·∫øn th·ª©c", "üìß H·ªó tr·ª£ h·ªçc t·∫≠p"]
    )

    # ƒê·ªçc menu ch·ª©c nƒÉng
    # if st.sidebar.button("üîä ƒê·ªçc menu"):
    #     text_to_speech(f"B·∫°n ƒëang ch·ªçn {menu}")

    if menu == "üè† Trang ch·ªß":
        home_page()
    elif menu == "üìö B√†i h·ªçc":
        show_lessons()
    elif menu == "üß† Ki·ªÉm tra ki·∫øn th·ª©c":
        quiz_interface()
    else:
        support_page()


if __name__ == "__main__":
    main()
    # D·ªçn d·∫πp khi tho√°t ·ª©ng d·ª•ng
    if pygame.mixer.get_init():
        pygame.mixer.quit()